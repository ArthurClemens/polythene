{"version":3,"sources":["spinner.es6"],"names":["require","_mithril","_transition","_shadow","CSS_CLASSES","block","placeholder","animation","visible","small","regular","medium","large","fab","raised","permanent","singleColor","animated","typeClasses","classForType","mode","arguments","length","undefined","show","ctrl","opts","isTransitioning","_transition2","default","Object","assign","el","showClass","then","hide","afterHide","style","display","_mithril2","redraw","notifyState","percentage","getPercentage","createView","tag","props","class","type","join","id","config","inited","context","vdom","setTimeout","events","content","component","_shadow2","z","before","after","delay","value","isNaN","parseFloat","controller","view","hideDelay","showDelay"],"mappings":"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","file":"spinner.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport transition from 'polythene/common/transition';\nimport shadow from 'polythene/shadow/shadow';\nimport 'polythene/spinner/theme/common/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-spinner',\n    placeholder: 'pe-spinner--placeholder',\n    animation: 'pe-spinner__animation',\n    visible: 'pe-spinner--visible',\n    small: 'pe-spinner--small',\n    regular: 'pe-spinner--regular',\n    medium: 'pe-spinner--medium',\n    large: 'pe-spinner--large',\n    fab: 'pe-spinner--fab',\n    raised: 'pe-spinner--raised',\n    permanent: 'pe-spinner--permanent',\n    singleColor: 'pe-spinner--single-color',\n    animated: 'pe-spinner--animated'\n};\n\nconst typeClasses = {\n    small: CSS_CLASSES.small,\n    regular: CSS_CLASSES.regular,\n    medium: CSS_CLASSES.medium,\n    large: CSS_CLASSES.large,\n    fab: CSS_CLASSES.fab\n};\n\nconst classForType = (mode = 'regular') => {\n    return typeClasses[mode];\n};\n\nconst show = (ctrl, opts) => {\n    if (ctrl.isTransitioning) {\n        return;\n    }\n    ctrl.isTransitioning = true;\n    return transition.show(Object.assign(\n        {},\n        opts, {\n            el: ctrl.el,\n            showClass: CSS_CLASSES.visible\n        }\n    )).then(() => {\n        ctrl.isTransitioning = false;\n        ctrl.visible = true;\n    });\n};\n\nconst hide = (ctrl, opts) => {\n    if (ctrl.isTransitioning) {\n        return;\n    }\n    ctrl.isTransitioning = true;\n    return transition.hide(Object.assign(\n        {},\n        opts, {\n            el: ctrl.el,\n            afterHide: () => (ctrl.el.style.display = 'none'),\n            showClass: CSS_CLASSES.visible\n        }\n    )).then(() => {\n        ctrl.isTransitioning = false;\n        ctrl.visible = false;\n        ctrl.hide = false;\n        m.redraw(); // removes remainder of drawn component\n    });\n};\n\nconst notifyState = (ctrl, opts) => {\n    if (opts.percentage && opts.getPercentage) {\n        let percentage;\n        if (typeof opts.percentage === 'function') {\n            percentage = opts.percentage();\n        } else {\n            percentage = opts.percentage;\n        }\n        opts.getPercentage(percentage, ctrl, opts);\n    }\n};\n\nconst createView = (ctrl, opts = {}) => {\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [\n                CSS_CLASSES.block,\n                classForType(opts.type),\n                (opts.singleColor ? CSS_CLASSES.singleColor: null),\n                (opts.raised ? CSS_CLASSES.raised : null),\n                (opts.animated ? CSS_CLASSES.animated : null),\n                (opts.permanent ? CSS_CLASSES.permanent : null),\n                opts.class\n            ].join(' '),\n            id: opts.id || '',\n            config: (el, inited, context, vdom) => {\n                if (inited) return;\n                if (opts.config) {\n                    opts.config(el, inited, context, vdom);\n                }\n                ctrl.el = el;\n\n                notifyState(ctrl, opts);\n\n                if (!opts.permanent) {\n                    setTimeout(() => {\n                        show(ctrl, opts);\n                    }, 0);\n                }\n\n            },\n        },\n        opts.events ? opts.events : null\n    );\n\n    notifyState(ctrl, opts);\n\n    if (ctrl.hide) {\n        setTimeout(() => {\n            hide(ctrl, opts);\n        }, 0);\n    }\n\n    const content = [\n        opts.raised && opts.content ? m.component(shadow, {\n            z: opts.z\n        }) : null,\n        opts.content || m('div', {class: CSS_CLASSES.animation}, 'Specific spinner missing')\n    ];\n\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst delay = (opts, mode) => {\n    const value = opts[mode];\n    return ((value !== true) && !isNaN(value))\n        ? parseFloat(value, 10) * 1000\n        : false;\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        return {\n            el: null,\n            isTransitioning: false,\n            visible: opts.permanent || false,\n            hide: false,\n            percentage: 0\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        if (!ctrl.visible) {\n            if ((opts.hide !== undefined && !opts.hide) || opts.show) {\n                const showDelay = delay(opts, 'show');\n                if (showDelay) {\n                    setTimeout(() => (ctrl.visible = true, m.redraw()), showDelay);\n                } else {\n                    ctrl.visible = true;\n                }\n            }\n        } else {\n            if ((opts.show !== undefined && !opts.show) || opts.hide) {\n                const hideDelay = delay(opts, 'hide');\n                if (hideDelay) {\n                    setTimeout(() => (ctrl.hide = true, m.redraw()), hideDelay);\n                } else {\n                    ctrl.hide = true;\n                }\n            }\n        }\n        if (ctrl.visible) {\n            return createView(ctrl, opts);\n        } else {\n            return m('span', {class: CSS_CLASSES.placeholder});\n        }\n    }\n};\n\nexport default component;\n"]}
{"version":3,"sources":["determinate-spinner.es6"],"names":["_mithril","require","_spinner","_config","_easing","CSS_CLASSES","block","animation","circle","circleRight","circleLeft","sizeFromType","type","arguments","length","undefined","_config2","default","percentageValue","min","max","percentage","rotateCircle","el","style","animate","ctrlEl","size","animationEl","querySelector","animationElStyle","clip","leftCircle","rightCircle","Math","handlePercentage","ctrl","opts","_previousPercentage","animated","STEP_DURATION","updateDuration","start","step","timestamp","progress","stepPercentage","newPercentage","_easing2","easeInOutQuad","window","requestAnimationFrame","component","view","content","_mithril2","class","join","getPercentage","_spinner2"],"mappings":"qJAYA,IAAAA,UAAAC,QAAA,sDACAC,SAAAD,QAAA,uEACAA,SAAA,4CACA,IAAAE,SAAAF,QAAA,uFACAG,QAAAH,QAAA,oEAEMI,aACFC,MAAO,yBACPC,UAAW,oCACXC,OAAQ,iCACRC,YAAa,wCACbC,WAAY,wCAGVC,aAAe,WAAA,GAACC,MAADC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAQ,SAAR,OAAuBG,UAAAC,QAAY,QAAUL,OAE5DM,gBAAkB,SAACC,IAAKC,IAAKC,YAAX,MAA2BF,MAAQC,IAAMD,KAAOE,YAElEC,aAAe,SAACC,GAAIJ,IAAKC,IAAKC,YAChC,GAAMG,OAAQD,GAAGC,KACjBA,OAAA,UACIA,MAAM,qBACNA,MAAM,kBACNA,MAAM,iBACNA,MAAM,gBAAkB,UAAYN,gBAAgBC,IAAKC,IAAKC,YAAc,QAG9EI,QAAU,SAACC,OAAQC,KAAMN,YAC3B,GAAMO,aAAcF,OAAOG,cAAc,IAAMxB,YAAYE,WACrDuB,iBAAmBF,YAAYJ,KAEjCH,YAAa,GACbS,iBAAiBC,KAAO,aAAeJ,KAAO,OAASA,KAAO,OAASA,KAAO,EAAI,MAElFG,iBAAiBC,KAAO,8BAG5B,IAAMC,YAAaN,OAAOG,cAAc,IAAMxB,YAAYK,YACpDuB,YAAcP,OAAOG,cAAc,IAAMxB,YAAYI,YAC3DuB,YAAWR,MAAMO,KAAOE,YAAYT,MAAMO,KAAO,aAAeJ,KAAO,EAAI,OAASA,KAAO,WAC3FL,aAAaW,YAAa,EAAG,IAAKC,KAAKf,IAAI,EAAgB,EAAbE,aAC9CC,aAAaU,WAAY,EAAG,IAAKX,aAG/Bc,iBAAmB,SAACd,WAAYe,KAAMT,MAAoB,GAAdU,MAAcxB,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KACvDuB,MAAKb,KAIVa,KAAKE,oBAAsBF,KAAKE,qBAAuB,EAEnDD,KAAKE,UAAYH,KAAKE,sBAAwBjB,YAAY,WAC1D,GAAMmB,eAAsC,IAAtBH,KAAKI,eACvBC,MAAQ,KACNC,KAAO,QAAPA,MAAQC,WACLF,QAAOA,MAAQE,UACpB,IAAMC,UAAWD,UAAYF,MACvBI,eAAiB,EAAMN,cAAgBK,SACvCE,cAAgBX,KAAKE,oBAAsBQ,gBAAkBzB,WAAae,KAAKE,oBACrFb,SAAQW,KAAKb,GAAII,KAAMqB,SAAA/B,QAAOgC,cAAcF,gBAC5CX,KAAKE,oBAAsBS,cACvBL,OAASG,SAAWL,cACpBU,OAAOC,sBAAsBR,MAE7BD,MAAQ,KAGhBQ,QAAOC,sBAAsBR,UAE7BlB,QAAQW,KAAKb,GAAII,KAAMN,YACvBe,KAAKE,oBAAsBjB,cAI7B+B,WACFC,KAAM,SAACjB,MAAoB,GAAdC,MAAcxB,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MACjBc,KAAOhB,aAAa0B,KAAKzB,KAkB/B,OAjBAyB,MAAKiB,SAAU,EAAAC,UAAAtC,SAAE,OAETuC,MAAOnD,YAAYE,aAEnB,EAAAgD,UAAAtC,SAAE,OACEuC,OAAQnD,YAAYG,OAAQH,YAAYK,YAAY+C,KAAK,QAE7D,EAAAF,UAAAtC,SAAE,OACEuC,OAAQnD,YAAYG,OAAQH,YAAYI,aAAagD,KAAK,SAItEpB,KAAKmB,OACDnD,YAAYC,MACZ+B,KAAKmB,OACPC,KAAK,KACPpB,KAAKqB,cAAgB,SAACrC,WAAYe,MAAb,MAAuBD,kBAAiBd,WAAYe,KAAMT,KAAMU,OAC9EkB,UAAAtC,QAAEmC,UAAFO,UAAA1C,QAAqBoB,wBAIrBe","file":"determinate-spinner.js","sourcesContent":["/*\nDerived from https://github.com/PolymerElements/paper-spinner\n\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport m from 'mithril';\nimport spinner from 'polythene/spinner/spinner';\nimport 'polythene/spinner/theme/determinate/theme';\nimport themeConfig from 'polythene/spinner/theme/determinate/config';\nimport easing from 'polythene/common/easing';\n\nconst CSS_CLASSES = {\n    block: 'pe-spinner-determinate',\n    animation: 'pe-spinner-determinate__animation',\n    circle: 'pe-spinner-determinate__circle',\n    circleRight: 'pe-spinner-determinate__circle--right',\n    circleLeft: 'pe-spinner-determinate__circle--left'\n};\n\nconst sizeFromType = (type = 'regular') => (themeConfig['size_' + type]);\n\nconst percentageValue = (min, max, percentage) => (min + ((max - min) * percentage));\n\nconst rotateCircle = (el, min, max, percentage) => {\n    const style = el.style;\n    style['transform'] =\n        style['-webkit-transform'] =\n        style['-moz-transform'] =\n        style['-ms-transform'] =\n        style['-o-transform'] = 'rotate(' + percentageValue(min, max, percentage) + 'deg)';\n};\n\nconst animate = (ctrlEl, size, percentage) => {\n    const animationEl = ctrlEl.querySelector('.' + CSS_CLASSES.animation);\n    const animationElStyle = animationEl.style;\n\n    if (percentage < 0.5) {\n        animationElStyle.clip = 'rect(0px, ' + size + 'px, ' + size + 'px, ' + size / 2 + 'px)';\n    } else {\n        animationElStyle.clip = 'rect(auto, auto, auto, auto)';\n    }\n\n    const leftCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleLeft);\n    const rightCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleRight);\n    leftCircle.style.clip = rightCircle.style.clip = 'rect(0px, ' + size / 2 + 'px, ' + size + 'px, ' + '0px)';\n    rotateCircle(rightCircle, 0, 180, Math.min(1, percentage * 2));\n    rotateCircle(leftCircle, 0, 360, percentage);\n};\n\nconst handlePercentage = (percentage, ctrl, size, opts = {}) => {\n    if (!ctrl.el) {\n        return;\n    }\n\n    ctrl._previousPercentage = ctrl._previousPercentage || 0;\n\n    if (opts.animated && ctrl._previousPercentage !== percentage) {\n        const STEP_DURATION = opts.updateDuration * 1000;\n        let start = null;\n        const step = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const stepPercentage = 1.0 / STEP_DURATION * progress;\n            const newPercentage = ctrl._previousPercentage + stepPercentage * (percentage - ctrl._previousPercentage);\n            animate(ctrl.el, size, easing.easeInOutQuad(newPercentage));\n            ctrl._previousPercentage = newPercentage;\n            if (start && progress < STEP_DURATION) {\n                window.requestAnimationFrame(step);\n            } else {\n                start = null;\n            }\n        };\n        window.requestAnimationFrame(step);\n    } else {\n        animate(ctrl.el, size, percentage);\n        ctrl._previousPercentage = percentage;\n    }\n};\n\nconst component = {\n    view: (ctrl, opts = {}) => {\n        const size = sizeFromType(opts.type);\n        opts.content = m('div',\n            {\n                class: CSS_CLASSES.animation\n            }, [\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleLeft].join(' ')\n                }),\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleRight].join(' ')\n                })\n            ]\n        );\n        opts.class = [\n            CSS_CLASSES.block,\n            opts.class\n        ].join(' ');\n        opts.getPercentage = (percentage, ctrl) => (handlePercentage(percentage, ctrl, size, opts));\n        return m.component(spinner, opts);\n    }\n};\n\nexport default component;\n"]}
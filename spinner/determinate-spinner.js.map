{"version":3,"sources":["determinate-spinner.es6"],"names":["CSS_CLASSES","block","animation","circle","circleRight","circleLeft","sizeFromType","type","percentageValue","min","max","percentage","rotateCircle","el","style","animate","ctrlEl","querySelector","animationEl","animationElStyle","clip","size","leftCircle","rightCircle","Math","handlePercentage","ctrl","_previousPercentage","opts","animated","updateDuration","step","start","timestamp","STEP_DURATION","progress","easeInOutQuad","newPercentage","window","requestAnimationFrame","component","view","content","join","class","getPercentage"],"mappings":"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","file":"determinate-spinner.js","sourcesContent":["/*\nDerived from https://github.com/PolymerElements/paper-spinner\n\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport m from 'mithril';\nimport spinner from 'polythene/spinner/spinner';\nimport 'polythene/spinner/theme/determinate/theme';\nimport themeConfig from 'polythene/spinner/theme/determinate/config';\nimport easing from 'polythene/common/easing';\n\nconst CSS_CLASSES = {\n    block: 'pe-spinner-determinate',\n    animation: 'pe-spinner-determinate__animation',\n    circle: 'pe-spinner-determinate__circle',\n    circleRight: 'pe-spinner-determinate__circle--right',\n    circleLeft: 'pe-spinner-determinate__circle--left'\n};\n\nconst sizeFromType = (type = 'regular') => (themeConfig['size_' + type]);\n\nconst percentageValue = (min, max, percentage) => (min + ((max - min) * percentage));\n\nconst rotateCircle = (el, min, max, percentage) => {\n    const style = el.style;\n    style['transform'] =\n        style['-webkit-transform'] =\n        style['-moz-transform'] =\n        style['-ms-transform'] =\n        style['-o-transform'] = 'rotate(' + percentageValue(min, max, percentage) + 'deg)';\n};\n\nconst animate = (ctrlEl, size, percentage) => {\n    const animationEl = ctrlEl.querySelector('.' + CSS_CLASSES.animation);\n    const animationElStyle = animationEl.style;\n\n    if (percentage < 0.5) {\n        animationElStyle.clip = 'rect(0px, ' + size + 'px, ' + size + 'px, ' + size / 2 + 'px)';\n    } else {\n        animationElStyle.clip = 'rect(auto, auto, auto, auto)';\n    }\n\n    const leftCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleLeft);\n    const rightCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleRight);\n    leftCircle.style.clip = rightCircle.style.clip = 'rect(0px, ' + size / 2 + 'px, ' + size + 'px, ' + '0px)';\n    rotateCircle(rightCircle, 0, 180, Math.min(1, percentage * 2));\n    rotateCircle(leftCircle, 0, 360, percentage);\n};\n\nconst handlePercentage = (percentage, ctrl, size, opts = {}) => {\n    if (!ctrl.el) {\n        return;\n    }\n\n    ctrl._previousPercentage = ctrl._previousPercentage || 0;\n\n    if (opts.animated && ctrl._previousPercentage !== percentage) {\n        const STEP_DURATION = opts.updateDuration * 1000;\n        let start = null;\n        const step = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const stepPercentage = 1.0 / STEP_DURATION * progress;\n            const newPercentage = ctrl._previousPercentage + stepPercentage * (percentage - ctrl._previousPercentage);\n            animate(ctrl.el, size, easing.easeInOutQuad(newPercentage));\n            ctrl._previousPercentage = newPercentage;\n            if (start && progress < STEP_DURATION) {\n                window.requestAnimationFrame(step);\n            } else {\n                start = null;\n            }\n        };\n        window.requestAnimationFrame(step);\n    } else {\n        animate(ctrl.el, size, percentage);\n        ctrl._previousPercentage = percentage;\n    }\n};\n\nconst component = {\n    view: (ctrl, opts = {}) => {\n        const size = sizeFromType(opts.type);\n        opts.content = m('div',\n            {\n                class: CSS_CLASSES.animation\n            }, [\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleLeft].join(' ')\n                }),\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleRight].join(' ')\n                })\n            ]\n        );\n        opts.class = [\n            CSS_CLASSES.block,\n            opts.class\n        ].join(' ');\n        opts.getPercentage = (percentage, ctrl) => (handlePercentage(percentage, ctrl, size, opts));\n        return m.component(spinner, opts);\n    }\n};\n\nexport default component;\n"]}
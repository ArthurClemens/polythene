{"version":3,"sources":["icon.es6"],"names":["require","_mithril","_svg","CSS_CLASSES","icon","avatar","small","regular","medium","large","typeClasses","classForType","mode","arguments","length","undefined","layoutContent","opts","content","svg","svgOpts","Object","assign","tag","_mithril2","default","component","_svg2","msvg","trust","src","createView","ctrl","props","class","type","join","id","config","events","before","after","controller","redraw","strategy","view"],"mappings":"sJAAAA,QAAA,iCACA,IAAAC,UAAAD,QAAA,sDACAE,KAAAF,QAAA,uDACAA,SAAA,6BAEA,IAAMG,cACFC,KAAM,UACNC,OAAQ,kBACRC,MAAO,iBACPC,QAAS,mBACTC,OAAQ,kBACRC,MAAO,kBAGLC,aACFJ,MAAOH,YAAYG,MACnBC,QAASJ,YAAYI,QACrBC,OAAQL,YAAYK,OACpBC,MAAON,YAAYM,OAGjBE,aAAe,WAAsB,GAArBC,MAAqBC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAd,SACzB,OAAOH,aAAYE,OAGjBI,cAAgB,SAACC,MACnB,GAAIA,KAAKC,QACL,MAAOD,MAAKC,OACT,IAAID,KAAKE,IAAK,CACjB,GAAIC,SAAUC,OAAOC,UAAWL,KAAKE,IAErC,OADAC,SAAQG,IAAMH,QAAQG,KAAO,IACtBC,UAAAC,QAAEC,UAAFC,MAAAF,QAAiBL,SACrB,MAAIH,MAAKW,MACL,EAAAJ,UAAAC,SAAE,WAAYD,UAAAC,QAAEI,MAAMZ,KAAKW,QAE3B,EAAAJ,UAAAC,SAAE,KACL,EAAAD,UAAAC,SAAE,OACEK,IAAKb,KAAKa,QAMpBC,WAAa,SAACC,MAAoB,GAAdf,MAAcJ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MAC9BU,IAAMN,KAAKM,KAAO,MAClBU,MAAQZ,OAAOC,WAEbY,OAAQ/B,YAAYC,KAAMO,aAAaM,KAAKkB,MAAOlB,KAAKiB,OAAOE,KAAK,KACpEC,GAAIpB,KAAKoB,IAAM,GACfC,OAAQrB,KAAKqB,QAEjBrB,KAAKsB,OAAStB,KAAKsB,OAAS,MAE1BrB,QAAUF,cAAcC,KAC9B,QAAO,EAAAO,UAAAC,SAAEF,IAAKU,OAAQhB,KAAKuB,OAAQtB,QAASD,KAAKwB,SAG/Cf,WACFgB,WAAY,WACRlB,UAAAC,QAAEkB,OAAOC,SAAS,SAEtBC,KAAM,SAACb,MAAoB,GAAdf,MAAcJ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KACvB,OAAOkB,YAAWC,KAAMf,wBAIjBS","file":"icon.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport svg from 'polythene/svg/svg';\nimport 'polythene/icon/theme/theme';\n\nconst CSS_CLASSES = {\n    icon: 'pe-icon',\n    avatar: 'pe-icon--avatar',\n    small: 'pe-icon--small',\n    regular: 'pe-icon--regular',\n    medium: 'pe-icon--medium',\n    large: 'pe-icon--large'\n};\n\nconst typeClasses = {\n    small: CSS_CLASSES.small,\n    regular: CSS_CLASSES.regular,\n    medium: CSS_CLASSES.medium,\n    large: CSS_CLASSES.large\n};\n\nconst classForType = (mode = 'regular') => {\n    return typeClasses[mode];\n};\n\nconst layoutContent = (opts) => {\n    if (opts.content) {\n        return opts.content;\n    } else if (opts.svg) {\n        let svgOpts = Object.assign({}, opts.svg);\n        svgOpts.tag = svgOpts.tag || 'i';\n        return m.component(svg, svgOpts);\n    } else if (opts.msvg) {\n        return m('i.pe-svg', m.trust(opts.msvg));\n    } else {\n        return m('i',\n            m('img', {\n                src: opts.src\n            })\n        );\n    }\n};\n\nconst createView = (ctrl, opts = {}) => {\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [CSS_CLASSES.icon, classForType(opts.type), opts.class].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    const content = layoutContent(opts);\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: () => {\n        m.redraw.strategy('none');\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
{"version":3,"sources":["icon.es6"],"names":["CSS_CLASSES","icon","avatar","small","regular","medium","large","typeClasses","classForType","mode","layoutContent","opts","content","svg","Object","assign","svgOpts","tag","component","msvg","trust","src","createView","class","type","join","id","config","events","props","before","after","controller","redraw","strategy","view","ctrl"],"mappings":"8GACA,gJ,8GAIA,GAAMA,aAAc,CAChBC,KAAM,SADU,CAEhBC,OAAQ,iBAFQ,CAGhBC,MAAO,gBAHS,CAIhBC,QAAS,kBAJO,CAKhBC,OAAQ,iBALQ,CAMhBC,MAAO,gBANS,CAApB,CASMC,YAAc,CAChBJ,MAAOH,YAAYG,KADH,CAEhBC,QAASJ,YAAYI,OAFL,CAGhBC,OAAQL,YAAYK,MAHJ,CAIhBC,MAAON,YAAYM,KAJH,CATpB,CAgBME,aAAe,UAAsB,8DAAd,SAAc,CACvC,MAAOD,aAAYE,CAAZ,CACV,CAlBD,CAoBMC,cAAgB,WAAU,CAC5B,GAAIC,EAAKC,OAAT,CACI,MAAOD,GAAKC,OAAZ,CACG,GAAID,EAAKE,GAAT,CAAc,CACjB,GAAI,GAAUC,OAAOC,MAAP,IAAkBJ,EAAKE,GAAvB,CAAd,CAEA,MADAG,GAAQC,GAAR,CAAcD,EAAQC,GAAR,EAAe,GAC7B,CAAO,kBAAEC,SAAF,eAAiBF,CAAjB,CACV,CAP2B,MAOjBL,GAAKQ,IAPY,+CAQH,kBAAEC,KAAF,CAAQT,EAAKQ,IAAb,CARG,qDAYXR,EAAKU,GAZM,gBAgB/B,CApCD,CAsCMC,WAAa,UAAqB,iEAC9B,EAAMX,EAAKM,GAAL,EAAY,KADY,CAE9B,EAAQH,OAAOC,MAAP,IACV,CACIQ,MAAO,CAACvB,YAAYC,IAAb,CAAmBO,aAAaG,EAAKa,IAAlB,CAAnB,CAA4Cb,EAAKY,KAAjD,EAAwDE,IAAxD,CAA6D,GAA7D,CADX,CAEIC,GAAIf,EAAKe,EAAL,EAAW,EAFnB,CAGIC,OAAQhB,EAAKgB,MAHjB,CADU,CAMVhB,EAAKiB,MAAL,CAAcjB,EAAKiB,MAAnB,CAA4B,IANlB,CAFsB,CAU9B,EAAUlB,cAAcC,CAAd,CAVoB,CAWpC,MAAO,sBAAEM,CAAF,CAAOY,CAAP,CAAc,CAAClB,EAAKmB,MAAN,CAAclB,CAAd,CAAuBD,EAAKoB,KAA5B,CAAd,CACV,CAlDD,CAoDMb,UAAY,CACdc,WAAY,qBAAM,CACd,kBAAEC,MAAF,CAASC,QAAT,CAAkB,MAAlB,CACH,CAHa,CAIdC,KAAM,gBAAqB,iEACvB,MAAOb,YAAWc,CAAX,CAAiBzB,CAAjB,CACV,CANa,CApDlB,C,gBA6DeO,S","file":"icon.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport svg from 'polythene/svg/svg';\nimport 'polythene/icon/theme/theme';\n\nconst CSS_CLASSES = {\n    icon: 'pe-icon',\n    avatar: 'pe-icon--avatar',\n    small: 'pe-icon--small',\n    regular: 'pe-icon--regular',\n    medium: 'pe-icon--medium',\n    large: 'pe-icon--large'\n};\n\nconst typeClasses = {\n    small: CSS_CLASSES.small,\n    regular: CSS_CLASSES.regular,\n    medium: CSS_CLASSES.medium,\n    large: CSS_CLASSES.large\n};\n\nconst classForType = (mode = 'regular') => {\n    return typeClasses[mode];\n};\n\nconst layoutContent = (opts) => {\n    if (opts.content) {\n        return opts.content;\n    } else if (opts.svg) {\n        let svgOpts = Object.assign({}, opts.svg);\n        svgOpts.tag = svgOpts.tag || 'i';\n        return m.component(svg, svgOpts);\n    } else if (opts.msvg) {\n        return m('i.pe-svg', m.trust(opts.msvg));\n    } else {\n        return m('i',\n            m('img', {\n                src: opts.src\n            })\n        );\n    }\n};\n\nconst createView = (ctrl, opts = {}) => {\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [CSS_CLASSES.icon, classForType(opts.type), opts.class].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    const content = layoutContent(opts);\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: () => {\n        m.redraw.strategy('none');\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
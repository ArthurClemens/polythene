{"version":3,"file":"polythene-css-ios-spinner.js","sources":["../src/color.js","../src/layout.js","../src/vars.js","../src/index.js","../../polythene-css-classes/ios-spinner.js"],"sourcesContent":["// @ts-check\n\nimport { color as superColor } from \"polythene-css-base-spinner\";\nimport { sel, createColor } from \"polythene-core-css\";\n\nconst generalFns = ({\n  general_styles: selector => [\n    sel(selector, {\n      \" .pe-ios-spinner__blade\": {\n        background: \"currentcolor\"\n      }\n    })\n  ],\n});\n\nconst tintFns = tint => ({\n  [\"color_\" + tint]: (selector, vars) => [\n    sel(selector, {\n      color: vars[\"color_\" + tint],\n    })\n  ]\n});\n\nconst lightTintFns = Object.assign({}, generalFns, tintFns(\"light\"));\nconst darkTintFns = Object.assign({}, generalFns, tintFns(\"dark\"));\n\nexport default createColor({\n  varFns: { lightTintFns, darkTintFns },\n  superColor\n});\n","// @ts-check\n\nimport { layout as superLayout } from \"polythene-css-base-spinner\";\nimport { sel, createLayout } from \"polythene-core-css\";\nimport { styleDurationToMs } from \"polythene-core\";\n\nconst bladeWidth  = 9; // percent\nconst bladeHeight = 28; // percent\n\nconst kfFade = () => ({\n  \" 0%\": {\n    opacity: .640\n  },\n  \" 100%\": {\n    opacity: .035\n  }\n});\n\nconst positionBlades = vars => \n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(i => {\n    // reverse to improve performance on iOS\n    const delay = -1 / 12 * i * styleDurationToMs(vars.rotation_animation_duration);\n    const rotation = 360 - (360 / 12 * i);\n    return {\n      [\" .pe-ios-spinner__blade:nth-of-type(\" + (i + 1) + \")\"]: {\n        transform: \"rotate(\" + rotation + \"deg) translate3d(0,-140%,0)\",\n        animation: \"iosSpinnerFade \" + vars.rotation_animation_duration + \" \" + delay + \"ms linear infinite\"\n      }\n    };\n  });\n\nconst varFns = {\n  general_styles: selector => [\n    sel(selector, {\n      \" .pe-ios-spinner__blades\": {\n        transform: \"translate3d(0,0,0)\",\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n\n      \" .pe-ios-spinner__blade\": {\n        position: \"absolute\",\n        width: bladeWidth + \"%\",\n        height: bladeHeight + \"%\",\n        left: ((100 - bladeWidth) / 2) + \"%\",\n        top: ((100 - bladeHeight) / 2) + \"%\",\n        opacity: 0,\n        borderRadius: \"50px\"\n      },\n\n      \"@keyframes iosSpinnerFade\": kfFade()\n    })\n  ],\n  rotation_animation_duration: (selector, vars) => [\n    sel(selector, {\n      \" .pe-ios-spinner__blades\": [\n        positionBlades(vars),\n      ],\n    })\n  ],\n};\n\nexport default createLayout({ varFns, superLayout });\n","// @ts-check\n\n/**\n * @typedef {import(\"../index\").IOSSpinnerVars} IOSSpinnerVars\n */\n\nimport { rgba } from \"polythene-core-css\";\nimport { vars } from \"polythene-theme\";\n\n/**\n * @type {IOSSpinnerVars} iOSSpinnerVars\n */\nconst iOSSpinnerVars = {\n  /**\n   * Generate general styles, not defined by variables\n   */\n  general_styles:              true,\n\n  rotation_animation_duration: \"1s\",\n\n  color_light:                 rgba(vars.color_light_foreground),\n  color_dark:                  rgba(vars.color_dark_foreground)\n};\n\nexport default iOSSpinnerVars;\n","// @ts-check\n\nimport classes from \"polythene-css-classes/ios-spinner\";\nimport color from \"./color\";\nimport layout from \"./layout\";\nimport vars from \"./vars\";\nimport { styler } from \"polythene-core-css\";\n\nconst fns = [layout, color];\nconst selector = `.${classes.component}`;\n\nconst addStyle = styler.createAddStyle(selector, fns, vars);\n\nconst getStyle = styler.createGetStyle(selector, fns, vars);\n    \nconst addGeneralStyleToHead = () =>\n  styler.addStyle({\n    selectors: [selector],\n    fns,\n    vars\n  });\n\nexport {\n  addGeneralStyleToHead,\n  addStyle,\n  getStyle,\n  color,\n  layout,\n  vars,\n};\n","\nexport default {\n  component: \"pe-ios-spinner\",\n\n  // elements\n  blades:    \"pe-ios-spinner__blades\",\n  blade:     \"pe-ios-spinner__blade\",\n};\n"],"names":["generalFns","general_styles","selector","sel","background","tintFns","tint","vars","color","lightTintFns","_extends","darkTintFns","createColor","varFns","superColor","positionBlades","map","i","delay","styleDurationToMs","rotation_animation_duration","transform","animation","position","width","height","bladeWidth","bladeHeight","left","top","opacity","borderRadius","createLayout","superLayout","iOSSpinnerVars","color_light","rgba","color_light_foreground","color_dark","color_dark_foreground","fns","layout","addStyle","styler","createAddStyle","getStyle","createGetStyle","selectors"],"mappings":"+2BAKA,IAAMA,EAAc,CAClBC,eAAgB,SAAAC,SAAY,CAC1BC,MAAID,EAAU,2BACe,CACzBE,WAAY,qBAMdC,EAAU,SAAAC,eACb,SAAWA,GAAO,SAACJ,EAAUK,SAAS,CACrCJ,MAAID,EAAU,CACZM,MAAOD,EAAK,SAAWD,UAKvBG,EAAeC,EAAc,GAAIV,EAAYK,EAAQ,UACrDM,EAAcD,EAAc,GAAIV,EAAYK,EAAQ,WAE3CO,cAAY,CACzBC,OAAQ,CAAEJ,aAAAA,EAAcE,YAAAA,GACxBG,WAAAA,UCVIC,EAAiB,SAAAR,SACrB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAIS,KAAI,SAAAC,OAEnCC,GAAS,EAAI,GAAKD,EAAIE,oBAAkBZ,EAAKa,yCAGhD,wCAA0CH,EAAI,GAAK,IAAM,CACxDI,UAAW,WAHE,IAAO,GAAWJ,GAGG,8BAClCK,UAAW,kBAAoBf,EAAKa,4BAA8B,IAAMF,EAAQ,2BAKlFL,EAAS,CACbZ,eAAgB,SAAAC,SAAY,CAC1BC,MAAID,EAAU,4BACgB,CAC1BmB,UAAW,qBACXE,SAAU,WACVC,MAAO,OACPC,OAAQ,kCAGiB,CACzBF,SAAU,WACVC,MAAOE,KACPD,OAAQE,MACRC,KAAO,QACPC,IAAM,MACNC,QAAS,EACTC,aAAc,oCAvCA,OACb,CACLD,QAAS,aAEF,CACPA,QAAS,WAwCXV,4BAA6B,SAAClB,EAAUK,SAAS,CAC/CJ,MAAID,EAAU,4BACgB,CAC1Ba,EAAeR,WAMRyB,eAAa,CAAEnB,OAAAA,EAAQoB,YAAAA,WCnDhCC,EAAiB,CAIrBjC,gBAA6B,EAE7BmB,4BAA6B,KAE7Be,YAA6BC,OAAK7B,OAAK8B,wBACvCC,WAA6BF,OAAK7B,OAAKgC,wBCbnCC,EAAM,CAACC,EAAQjC,GACfN,aCPO,kBDSPwC,EAAWC,SAAOC,eAAe1C,EAAUsC,EAAKjC,GAEhDsC,EAAWF,SAAOG,eAAe5C,EAAUsC,EAAKjC,2BAExB,kBAC5BoC,SAAOD,SAAS,CACdK,UAAW,CAAC7C,GACZsC,IAAAA,EACAjC,KAAAA"}
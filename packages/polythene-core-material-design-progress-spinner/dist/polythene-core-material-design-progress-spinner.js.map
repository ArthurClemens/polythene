{"version":3,"file":"polythene-core-material-design-progress-spinner.js","sources":["../../polythene-css-classes/material-design-progress-spinner.js","../src/index.js"],"sourcesContent":["\nexport default {\n  component:          \"pe-md-progress-spinner\",\n\n  // elements\n  animation:          \"pe-md-progress-spinner__animation\",\n  circle:             \"pe-md-progress-spinner__circle\",\n  circleRight:        \"pe-md-progress-spinner__circle-right\",\n  circleLeft:         \"pe-md-progress-spinner__circle-left\"\n};\n","import { unpackAttrs, getStyle, styleDurationToMs } from \"polythene-core\";\nimport { easing } from \"polythene-utilities\";\nimport classes from \"polythene-css-classes/material-design-progress-spinner\";\n\nconst percentageValue = (min, max, percentage = 0) => min + ((max - min) * percentage);\n\nconst rotateCircle = (domElement, min, max, percentage) => {\n  const style = domElement.style;\n  style[\"transform\"] =\n    style[\"-webkit-transform\"] =\n    style[\"-moz-transform\"] =\n    style[\"-ms-transform\"] =\n    style[\"-o-transform\"] = \"rotate(\" + percentageValue(min, max, percentage) + \"deg)\";\n};\n\nconst animate = (stateEl, size, percentage) => {\n  const animationEl = stateEl.querySelector(\".\" + classes.animation);\n  const animationElStyle = animationEl.style;\n  if (percentage < 0.5) {\n    animationElStyle.clip = \"rect(0px, \" + size + \"px, \" + size + \"px, \" + size / 2 + \"px)\";\n  } else {\n    animationElStyle.clip = \"rect(auto, auto, auto, auto)\";\n  }\n  const leftCircle = stateEl.querySelector(\".\" + classes.circleLeft);\n  const rightCircle = stateEl.querySelector(\".\" + classes.circleRight);\n  leftCircle.style.clip = rightCircle.style.clip = \"rect(0px, \" + size / 2 + \"px, \" + size + \"px, \" + \"0px)\";\n  rotateCircle(rightCircle, 0, 180, Math.min(1, percentage * 2));\n  rotateCircle(leftCircle, 0, 360, percentage);\n};\n\nconst updateWithPercentage = ({ domElement, isAnimating, setIsAnimating, percentage, setPercentage, size, props }) => {\n  if (!domElement || isAnimating || size === undefined || props.percentage === undefined) {\n    return;\n  }\n  const currentPercentage = unpackAttrs(props.percentage);\n  const previousPercentage = percentage;\n  if (previousPercentage !== currentPercentage) {\n    const easingFn = props.animated\n      ? easing.easeInOutQuad\n      : v => v;\n    if (props.animated) {\n      const animationDuration = props.updateDuration !== undefined\n        ? props.updateDuration * 1000\n        : styleDurationToMs(getStyle({ element: domElement.querySelector(`.${classes.animation}`), prop: \"animation-duration\" }));\n      let start = null;\n      const step = timestamp => {\n        if (!start) start = timestamp;\n        const progress = timestamp - start;\n        const stepPercentage = 1.0 / animationDuration * progress;\n        const newPercentage = previousPercentage + stepPercentage * (currentPercentage - previousPercentage);\n        animate(domElement, size, easingFn(newPercentage));\n        if (start && progress < animationDuration) {\n          window.requestAnimationFrame(step);\n        } else {\n          start = null;\n          setPercentage(currentPercentage);\n          setIsAnimating(false);\n        }\n      };\n      setIsAnimating(true);\n      window.requestAnimationFrame(step);\n    } else {\n      animate(domElement, size, easingFn(currentPercentage));\n      setPercentage(currentPercentage);\n    }\n  }\n};\n\nconst getSize = element => \n  Math.round(\n    element\n      ? parseFloat(getStyle({ element, prop: \"height\" })) - 2 * parseFloat(getStyle({ element, prop: \"padding\" }))\n      : 0\n  );\n\nexport const _Spinner = ({ h, useState, useEffect, BaseSpinner, ...props }) => {\n  const [percentage, setPercentage] = useState(0);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [domElement, setDomElement] = useState();\n  const [size, setSize] = useState();\n\n  useEffect(\n    () => {\n      if (!domElement) {\n        return;\n      }\n      setSize(getSize(domElement));\n    },\n    [domElement]\n  );\n\n  updateWithPercentage({ domElement, isAnimating, percentage, setPercentage, setIsAnimating, size, props });\n\n  const content = props.content || h(\"div\",\n    {\n      className: classes.animation,\n      style: {\n        width: size + \"px\",\n        height: size + \"px\"\n      }\n    },\n    [\n      h(\"div\", {\n        className: [classes.circle, classes.circleLeft].join(\" \")\n      }),\n      h(\"div\", {\n        className: [classes.circle, classes.circleRight].join(\" \")\n      })\n    ]\n  );\n\n  const componentProps = Object.assign({}, \n    props,\n    {\n      ref: dom => dom && !domElement && (\n        setDomElement(dom)\n      ),\n      className: [classes.component, props.className].join(\" \"),\n      content,\n    }\n  );\n\n  return h(BaseSpinner, componentProps);\n};\n"],"names":["component","animation","circle","circleRight","circleLeft","rotateCircle","domElement","min","max","percentage","style","percentageValue","animate","stateEl","size","animationElStyle","querySelector","classes","clip","leftCircle","rightCircle","Math","h","useState","useEffect","BaseSpinner","props","setPercentage","isAnimating","setIsAnimating","setDomElement","setSize","element","round","parseFloat","getStyle","prop","undefined","currentPercentage","unpackAttrs","previousPercentage","easingFn","animated","easing","easeInOutQuad","v","animationDuration","updateDuration","styleDurationToMs","start","window","requestAnimationFrame","step","timestamp","progress","updateWithPercentage","content","className","width","height","join","_extends","ref","dom"],"mappings":"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"}
{"version":3,"file":"polythene-core-textfield.js","sources":["../../polythene-css-classes/textfield.js","../src/index.js"],"sourcesContent":["\nexport default {\n  component:         \"pe-textfield\",\n\n  // elements\n  counter:           \"pe-textfield__counter\",\n  error:             \"pe-textfield__error\",\n  errorPlaceholder:  \"pe-textfield__error-placeholder\",\n  focusHelp:         \"pe-textfield__help-focus\",\n  help:              \"pe-textfield__help\",\n  input:             \"pe-textfield__input\",\n  inputArea:         \"pe-textfield__input-area\",\n  label:             \"pe-textfield__label\",\n  optionalIndicator: \"pe-textfield__optional-indicator\",\n  requiredIndicator: \"pe-textfield__required-indicator\",\n\n  // states\n  hasCounter:        \"pe-textfield--counter\",\n  hasFloatingLabel:  \"pe-textfield--floating-label\",\n  hasFullWidth:      \"pe-textfield--full-width\",\n  hideClear:         \"pe-textfield--hide-clear\",\n  hideSpinner:       \"pe-textfield--hide-spinner\",\n  hideValidation:    \"pe-textfield--hide-validation\",\n  isDense:           \"pe-textfield--dense\",\n  isRequired:        \"pe-textfield--required\",\n  stateDirty:        \"pe-textfield--dirty\",\n  stateDisabled:     \"pe-textfield--disabled\",\n  stateFocused:      \"pe-textfield--focused\",\n  stateInvalid:      \"pe-textfield--invalid\",\n  stateReadonly:     \"pe-textfield--readonly\",\n};\n","import { filterSupportedAttributes } from \"polythene-core\";\nimport classes from \"polythene-css-classes/textfield\";\n\nconst DEFAULT_VALID_STATE = {\n  invalid: false,\n  message: undefined,\n};\n\nconst ignoreEvent = (props, name) =>\n  props.ignoreEvents && props.ignoreEvents.indexOf(name) !== -1;\n\nexport const _TextField = ({\n  h,\n  a,\n  useState,\n  useEffect,\n  useRef,\n  getRef,\n  ...props\n}) => {\n  const defaultValue =\n    props.defaultValue !== undefined && props.defaultValue !== null\n      ? props.defaultValue.toString()\n      : props.value !== undefined && props.value !== null\n      ? props.value.toString()\n      : \"\";\n\n  const [domElement, setDomElement] = useState();\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [value, setValue] = useState(defaultValue);\n  const inputElRef = useRef();\n  const previousValueRef = useRef();\n  const previousStatusRef = useRef();\n  const isDirtyRef = useRef(defaultValue !== \"\");\n  const hasFocusRef = useRef(false);\n  const isTouchedRef = useRef(false);\n  const errorRef = useRef(props.error);\n  const inputType = props.multiLine ? \"textarea\" : \"input\";\n  const showErrorPlaceholder = !!(\n    props.valid !== undefined ||\n    props.validate ||\n    props.min ||\n    props.max ||\n    props[a.minlength] ||\n    props[a.maxlength] ||\n    props.required ||\n    props.pattern\n  );\n\n  const handleStateUpdate = ({ type, focus, value } = {}) => {\n    if (!inputElRef.current) {\n      return;\n    }\n    if (value !== undefined) {\n      inputElRef.current.value = value;\n    }\n    if (focus !== undefined) {\n      hasFocusRef.current = focus;\n      if (focus) {\n        inputElRef.current.focus();\n      } else {\n        inputElRef.current.blur();\n      }\n    }\n    if (type === \"input\" && (props.validateOnInput || props.counter)) {\n      isTouchedRef.current = inputElRef.current.value !== defaultValue;\n    }\n    if (type !== \"input\") {\n      isTouchedRef.current = inputElRef.current.value !== defaultValue;\n    }\n    if (type === \"onblur\") {\n      isTouchedRef.current = true;\n    }\n    isDirtyRef.current = inputElRef.current.value !== \"\";\n    checkValidity();\n    notifyState();\n    if (previousValueRef.current !== inputElRef.current.value) {\n      setValue(inputElRef.current.value); // force update\n    }\n  };\n\n  const validateCustom = () => {\n    if (!inputElRef.current) {\n      return DEFAULT_VALID_STATE;\n    }\n    const validState = props.validate(inputElRef.current.value);\n    return {\n      invalid: validState && !validState.valid,\n      message: validState && validState.error,\n    };\n  };\n\n  const validateCounter = () => ({\n    invalid: inputElRef.current.value.length > props.counter,\n    message: props.error,\n  });\n\n  const validateHTML = () => ({\n    invalid: !inputElRef.current.checkValidity(),\n    message: props.error,\n  });\n\n  const getValidStatus = () => {\n    let status = DEFAULT_VALID_STATE;\n\n    // props.validateResetOnClear: reset validation when field is cleared\n    if (\n      isTouchedRef.current &&\n      isInvalid &&\n      inputElRef.current.value.length === 0 &&\n      props.validateResetOnClear\n    ) {\n      isTouchedRef.current = false;\n      setIsInvalid(false);\n      errorRef.current = undefined;\n    }\n    if (props.counter) {\n      status = validateCounter();\n    }\n    if (!status.invalid && inputElRef.current.checkValidity) {\n      status = validateHTML();\n    }\n    if (!status.invalid && props.validate) {\n      status = validateCustom();\n    }\n    return status;\n  };\n\n  const checkValidity = () => {\n    // default\n    const status =\n      props.valid !== undefined\n        ? {\n            invalid: !props.valid,\n            message: props.error,\n          }\n        : !isTouchedRef.current && !props.validateAtStart\n        ? DEFAULT_VALID_STATE\n        : getValidStatus();\n    const previousInvalid = isInvalid;\n    errorRef.current = status.message;\n    if (status.invalid !== previousInvalid) {\n      setIsInvalid(status.invalid);\n    }\n    if (!status.invalid) {\n      errorRef.current = undefined;\n    }\n  };\n\n  const notifyState = () => {\n    if (props.onChange) {\n      const validStatus = getValidStatus();\n      const status = {\n        focus: hasFocusRef.current,\n        dirty: isDirtyRef.current,\n        invalid: validStatus.invalid,\n        error: validStatus.error,\n        value: inputElRef.current.value,\n      };\n      if (\n        JSON.stringify(status) !== JSON.stringify(previousStatusRef.current)\n      ) {\n        props.onChange({\n          ...status,\n          el: inputElRef.current,\n          setInputState: (newState) => {\n            const hasNewValue =\n              newState.value !== undefined &&\n              newState.value !== inputElRef.current.value;\n            const hasNewFocus =\n              newState.focus !== undefined &&\n              newState.focus !== hasFocusRef.current;\n            if (hasNewValue || hasNewFocus) {\n              handleStateUpdate(newState);\n            }\n          },\n        });\n        previousStatusRef.current = status;\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!domElement) {\n      return;\n    }\n    inputElRef.current = domElement.querySelector(inputType);\n    inputElRef.current.value = defaultValue;\n    handleStateUpdate();\n    checkValidity(); // handle `validateAtStart`\n    notifyState();\n  }, [domElement]);\n\n  // Handle value updates\n  useEffect(() => {\n    if (!inputElRef.current) {\n      return;\n    }\n    const value =\n      props.value !== undefined && props.value !== null\n        ? props.value\n        : inputElRef.current\n        ? inputElRef.current.value\n        : previousValueRef.current;\n    const valueStr =\n      value === undefined || value === null ? \"\" : value.toString();\n\n    if (inputElRef.current && previousValueRef.current !== valueStr) {\n      inputElRef.current.value = valueStr;\n      previousValueRef.current = valueStr;\n      handleStateUpdate({ type: \"input\" });\n    }\n  }, [inputElRef.current, props.value]);\n\n  // Handle error state updates\n  useEffect(() => {\n    if (!inputElRef.current) {\n      return;\n    }\n    checkValidity();\n    notifyState();\n  }, [props, inputElRef.current && inputElRef.current.value]);\n\n  const componentProps = Object.assign(\n    {},\n    filterSupportedAttributes(props),\n    props.testId && { \"data-test-id\": props.testId },\n    getRef(\n      (dom) =>\n        dom && !domElement && (setDomElement(dom), props.ref && props.ref(dom))\n    ),\n    {\n      className: [\n        classes.component,\n        isInvalid ? classes.stateInvalid : \"\",\n        hasFocusRef.current ? classes.stateFocused : \"\",\n        isDirtyRef.current ? classes.stateDirty : \"\",\n        props.floatingLabel ? classes.hasFloatingLabel : \"\",\n        props.disabled ? classes.stateDisabled : \"\",\n        props.readonly ? classes.stateReadonly : \"\",\n        props.dense ? classes.isDense : \"\",\n        props.required ? classes.isRequired : \"\",\n        props.fullWidth ? classes.hasFullWidth : \"\",\n        props.counter ? classes.hasCounter : \"\",\n        props.hideSpinner !== false && props.hideSpinner !== undefined\n          ? classes.hideSpinner\n          : \"\",\n        props.hideClear !== false && props.hideClear !== undefined\n          ? classes.hideClear\n          : \"\",\n        props.hideValidation ? classes.hideValidation : \"\",\n        props.tone === \"dark\" ? \"pe-dark-tone\" : null,\n        props.tone === \"light\" ? \"pe-light-tone\" : null,\n        props.className || props[a.class],\n      ].join(\" \"),\n    }\n  );\n\n  const allProps = {\n    ...props,\n    ...props.domAttributes,\n  };\n\n  let errorMessage = props.error || errorRef.current;\n  const type = allProps.multiLine\n    ? null\n    : !allProps.type || allProps.type === \"submit\" || allProps.type === \"search\"\n    ? \"text\"\n    : allProps.type;\n  const showError = isInvalid && errorMessage !== undefined;\n  const inactive = allProps.disabled || allProps[a.readonly];\n  const requiredIndicator =\n    allProps.required && allProps.requiredIndicator !== \"\"\n      ? h(\n          \"span\",\n          {\n            key: \"required\",\n            className: classes.requiredIndicator,\n          },\n          allProps.requiredIndicator || \"*\"\n        )\n      : null;\n  const optionalIndicator =\n    !allProps.required && allProps.optionalIndicator\n      ? h(\n          \"span\",\n          {\n            key: \"optional\",\n            className: classes.optionalIndicator,\n          },\n          allProps.optionalIndicator\n        )\n      : null;\n  const label = allProps.label\n    ? [allProps.label, requiredIndicator, optionalIndicator]\n    : null;\n\n  const contents = [\n    h(\n      \"div\",\n      {\n        className: classes.inputArea,\n        key: \"input-area\",\n      },\n      [\n        label\n          ? h(\n              \"label\",\n              {\n                key: \"label\",\n                className: classes.label,\n              },\n              label\n            )\n          : null,\n        h(\n          inputType,\n          Object.assign(\n            {},\n            {\n              key: \"input\",\n              className: classes.input,\n              disabled: allProps.disabled,\n            },\n            type ? { type } : null,\n            allProps.name ? { name: allProps.name } : null,\n\n            !ignoreEvent(allProps, a.onclick)\n              ? {\n                  [a.onclick]: () => {\n                    if (inactive) {\n                      return;\n                    }\n                    // in case the browser does not give the field focus,\n                    // for instance when the user tapped to the current field off screen\n                    handleStateUpdate({ focus: true });\n                  },\n                }\n              : null,\n\n            !ignoreEvent(allProps, a.onfocus)\n              ? {\n                  [a.onfocus]: () => {\n                    if (inactive) {\n                      return;\n                    }\n                    handleStateUpdate({ focus: true });\n\n                    // set CSS class manually in case field gets focus but is off screen\n                    // and no redraw is triggered\n                    // at the next redraw `hasFocusRef.current` will be read and the focus class be set\n                    // in the props.class statement\n                    if (domElement) {\n                      domElement.classList.add(classes.stateFocused);\n                    }\n                  },\n                }\n              : null,\n\n            !ignoreEvent(allProps, a.onblur)\n              ? {\n                  [a.onblur]: () => {\n                    handleStateUpdate({ type: \"onblur\", focus: false });\n                    // same principle as onfocus\n                    domElement.classList.remove(classes.stateFocused);\n                  },\n                }\n              : null,\n\n            !ignoreEvent(allProps, a.oninput)\n              ? {\n                  [a.oninput]: (e) => {\n                    // default input event\n                    // may be overwritten by props.events\n                    handleStateUpdate({ type: \"input\" });\n                  },\n                }\n              : null,\n\n            !ignoreEvent(allProps, a.onkeydown)\n              ? {\n                  [a.onkeydown]: (e) => {\n                    if (e.key === \"Enter\") {\n                      isTouchedRef.current = true;\n                    } else if (e.key === \"Escape\" || e.key === \"Esc\") {\n                      handleStateUpdate({ focus: false });\n                    }\n                  },\n                }\n              : null,\n\n            allProps.events ? allProps.events : null, // NOTE: may overwrite oninput\n            allProps.required !== undefined && !!allProps.required\n              ? { required: true }\n              : null,\n            allProps[a.readonly] !== undefined && !!allProps[a.readonly]\n              ? { [a.readonly]: true }\n              : null,\n            allProps.pattern !== undefined\n              ? { pattern: allProps.pattern }\n              : null,\n            allProps[a.maxlength] !== undefined\n              ? { [a.maxlength]: allProps[a.maxlength] }\n              : null,\n            allProps[a.minlength] !== undefined\n              ? { [a.minlength]: allProps[a.minlength] }\n              : null,\n            allProps.max !== undefined ? { max: allProps.max } : null,\n            allProps.min !== undefined ? { min: allProps.min } : null,\n            allProps[a.autofocus] !== undefined\n              ? { [a.autofocus]: allProps[a.autofocus] }\n              : null,\n            allProps[a.tabindex] !== undefined\n              ? { [a.tabindex]: allProps[a.tabindex] }\n              : null,\n            allProps.rows !== undefined ? { rows: allProps.rows } : null,\n            allProps.placeholder !== undefined\n              ? { placeholder: allProps.placeholder }\n              : null,\n            allProps.domAttributes !== undefined\n              ? { ...allProps.domAttributes }\n              : null\n          )\n        ),\n      ]\n    ),\n    allProps.counter\n      ? h(\n          \"div\",\n          {\n            key: \"counter\",\n            className: classes.counter,\n          },\n          (value.length || 0) + \" / \" + allProps.counter\n        )\n      : null,\n    allProps.help && !showError\n      ? h(\n          \"div\",\n          {\n            key: \"help\",\n            className: [\n              classes.help,\n              allProps.focusHelp ? classes.focusHelp : null,\n            ].join(\" \"),\n          },\n          allProps.help\n        )\n      : null,\n    showError\n      ? h(\n          \"div\",\n          {\n            key: \"error\",\n            className: classes.error,\n          },\n          errorMessage\n        )\n      : showErrorPlaceholder && !allProps.help\n      ? h(\"div\", {\n          key: \"error-placeholder\",\n          className: classes.errorPlaceholder,\n        })\n      : null,\n  ];\n\n  const content = [props.before, contents, props.after];\n\n  return h(props.element || \"div\", componentProps, content);\n};\n"],"names":["component","counter","error","errorPlaceholder","focusHelp","help","input","inputArea","label","optionalIndicator","requiredIndicator","hasCounter","hasFloatingLabel","hasFullWidth","hideClear","hideSpinner","hideValidation","isDense","isRequired","stateDirty","stateDisabled","stateFocused","stateInvalid","stateReadonly","DEFAULT_VALID_STATE","invalid","message","undefined","ignoreEvent","props","name","ignoreEvents","indexOf","h","a","useState","useEffect","useRef","getRef","defaultValue","toString","value","domElement","setDomElement","isInvalid","setIsInvalid","setValue","inputElRef","previousValueRef","previousStatusRef","isDirtyRef","hasFocusRef","isTouchedRef","errorRef","inputType","multiLine","showErrorPlaceholder","valid","validate","min","max","minlength","maxlength","required","pattern","handleStateUpdate","type","focus","current","blur","validateOnInput","checkValidity","notifyState","getValidStatus","status","length","validateResetOnClear","validState","validateCustom","validateAtStart","previousInvalid","onChange","validStatus","dirty","JSON","stringify","el","setInputState","newState","hasNewValue","hasNewFocus","querySelector","valueStr","componentProps","_extends","filterSupportedAttributes","testId","dom","ref","className","classes","floatingLabel","disabled","readonly","dense","fullWidth","tone","join","allProps","domAttributes","errorMessage","showError","inactive","key","contents","onclick","onfocus","classList","add","onblur","remove","oninput","e","onkeydown","events","autofocus","tabindex","rows","placeholder","content","before","after","element"],"mappings":"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"}
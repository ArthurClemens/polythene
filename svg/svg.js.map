{"version":3,"sources":["svg.es6"],"names":["CSS_CLASSES","block","globalCache","createView","opts","tag","Object","assign","class","join","id","config","events","content","src","ctrl","path","svg","trust","preloadNext","loadSvg","then","redraw","props","before","after","System","import","normalizeSync","normalizedName","preloading","data","preloadingIndex","console","log","preloadingItems","length","next","component","controller","strategy","prop","preload","view"],"mappings":"8GACA,2E,6GAGA,GAAMA,aAAc,CAChBC,MAAO,QADS,CAApB,CAIMC,cAJN,CAMMC,WAAa,WAAqB,iEAChC,QADgC,CACvB,QADuB,CAE9B,EAAMC,EAAKC,GAAL,EAAY,KAFY,CAG9B,EAAQC,OAAOC,MAAP,IACV,CACIC,MAAO,CAACR,YAAYC,KAAb,CAAoBG,EAAKI,KAAzB,EAAgCC,IAAhC,CAAqC,GAArC,CADX,CAEIC,GAAIN,EAAKM,EAAL,EAAW,EAFnB,CAGIC,OAAQP,EAAKO,MAHjB,CADU,CAMVP,EAAKQ,MAAL,CAAcR,EAAKQ,MAAnB,CAA4B,IANlB,CAHsB,CAWpC,GAAIR,EAAKS,OAAT,CACI,EAAUT,EAAKS,OADnB,KAEO,CACH,GAAM,GAAOT,EAAKU,GAAlB,CACIC,EAAKC,IAAL,KAAgBA,CAFjB,EAgBC,EAAMD,EAAKE,GAAL,EAhBP,CAiBC,EAAMA,GAAO,EAjBd,CAkBC,EAAU,kBAAEC,KAAF,CAAQD,CAAR,CAlBX,CAmBCE,YAAYJ,CAAZ,CAAkBX,CAAlB,CAnBD,GAIC,EAAMF,YAAYc,CAAZ,CAJP,CAKKC,CALL,EAOK,EAAU,kBAAEC,KAAF,CAAQD,CAAR,CAPf,CAQKE,YAAYJ,CAAZ,CAAkBX,CAAlB,CARL,GAWKW,EAAKC,IAAL,CAAUA,CAAV,CAXL,CAYKI,QAAQJ,CAAR,CAAcD,CAAd,CAAoBX,CAApB,EAA0BiB,IAA1B,CAA+B,kBAAEC,MAAjC,CAZL,EAqBN,CACD,MAAO,sBAAEjB,CAAF,CAAOkB,CAAP,CAAc,CAACnB,EAAKoB,MAAN,CAAcX,CAAd,CAAuBT,EAAKqB,KAA5B,CAAd,CACV,CA1CD,CA4CML,QAAU,eAA0C,+DACtD,GAAIM,QAAUA,OAAOC,MAArB,CAA6B,CACzB,GAAM,GAAiBD,OAAOE,aAAP,CAAqBZ,CAArB,CAAvB,CACA,MAAOU,QAAOC,MAAP,CAAcE,CAAd,EAA8BR,IAA9B,CAAmC,WAAe,CACjDS,CADiD,EAEjD5B,YAAYc,CAAZ,EAAoBe,CAF6B,CAGjDhB,EAAKiB,eAAL,EAHiD,CAIjDb,YAAYJ,CAAZ,CAAkBX,CAAlB,CAJiD,EAMjDW,EAAKE,GAAL,CAASc,CAAT,CAEP,CARM,CASV,CACOE,OAb8C,EAc9CA,QAAQC,GAAR,CAAY,kCAAZ,CAGX,CA7DD,CA+DMf,YAAc,aAAgB,CAChC,GAAKJ,EAAKoB,eAAV,IAGIpB,EAAKiB,eAAL,EAAwBjB,EAAKoB,eAAL,CAAqBC,MAHjD,GAMA,GAAM,GAAOrB,EAAKoB,eAAL,CAAqBpB,EAAKiB,eAA1B,CAAb,CACK9B,YAAYmC,CAAZ,CAPL,EAUItB,EAAKiB,eAAL,EAVJ,CAWIb,YAAYJ,CAAZ,CAAkBX,CAAlB,CAXJ,EAQIgB,QAAQiB,CAAR,CAActB,CAAd,CAAoBX,CAApB,IARJ,CAaH,CA7ED,CA+EMkC,UAAY,CACdC,WAAY,qBAAe,iEAEvB,MADA,mBAAEjB,MAAF,CAASkB,QAAT,CAAkB,MAAlB,CACA,CAAO,CACHxB,KAAM,kBAAEyB,IAAF,CAAO,EAAP,CADH,CAEHxB,IAAK,kBAAEwB,IAAF,CAAO,EAAP,CAFF,CAGHN,gBAAiB/B,EAAKsC,OAHnB,CAIHV,gBAAiB,CAJd,CAMV,CATa,CAUdW,KAAM,gBAAqB,iEACvB,MAAOxC,YAAWY,CAAX,CAAiBX,CAAjB,CACV,CAZa,CA/ElB,C,gBA8FekC,S","file":"svg.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport 'polythene/svg/theme/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-svg'\n};\n\nconst globalCache = {};\n\nconst createView = (ctrl, opts = {}) => {\n    let content, svg;\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [CSS_CLASSES.block, opts.class].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    if (opts.content) {\n        content = opts.content;\n    } else {\n        const path = opts.src;\n        if (ctrl.path() !== path) {\n            // not the current svg\n            svg = globalCache[path];\n            if (svg) {\n                // exists in cache\n                content = m.trust(svg);\n                preloadNext(ctrl, opts);\n            } else {\n                // load new, then wait until file has been loaded\n                ctrl.path(path);\n                loadSvg(path, ctrl, opts).then(m.redraw);\n            }\n        } else {\n            // use the current svg\n            svg = ctrl.svg();\n            svg = svg || '';\n            content = m.trust(svg);\n            preloadNext(ctrl, opts);\n        }\n    }\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst loadSvg = (path, ctrl, opts, preloading = false) => {\n    if (System && System.import) {\n        const normalizedName = System.normalizeSync(path);\n        return System.import(normalizedName).then(function(data) {\n            if (preloading) {\n                globalCache[path] = data;\n                ctrl.preloadingIndex++;\n                preloadNext(ctrl, opts);\n            } else {\n                ctrl.svg(data);\n            }\n        });\n    } else {\n        if (console) {\n            console.log('polythene/svg: System not found.');\n        }\n    }\n};\n\nconst preloadNext = (ctrl, opts) => {\n    if (!ctrl.preloadingItems) {\n        return;\n    }\n    if (ctrl.preloadingIndex >= ctrl.preloadingItems.length) {\n        return;\n    }\n    const next = ctrl.preloadingItems[ctrl.preloadingIndex];\n    if (!globalCache[next]) {\n        loadSvg(next, ctrl, opts, true);\n    } else {\n        ctrl.preloadingIndex++;\n        preloadNext(ctrl, opts);\n    }\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        m.redraw.strategy('none');\n        return {\n            path: m.prop(''),\n            svg: m.prop(''),\n            preloadingItems: opts.preload,\n            preloadingIndex: 0\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
{"version":3,"sources":["svg.es6"],"names":["require","_mithril","CSS_CLASSES","block","globalCache","createView","ctrl","opts","arguments","length","undefined","content","svg","tag","props","Object","assign","class","join","id","config","events","path","src","_mithril2","default","trust","preloadNext","loadSvg","then","redraw","before","after","preloading","System","import","normalizedName","normalizeSync","data","preloadingIndex","console","log","preloadingItems","next","component","controller","strategy","prop","preload","view"],"mappings":"sJAAAA,QAAA,iCACA,IAAAC,UAAAD,QAAA,qDACAA,SAAA,4BAEA,IAAME,cACFC,MAAO,UAGLC,eAEAC,WAAa,SAACC,MAAoB,GAAdC,MAAcC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MAChCG,QAAA,OAASC,IAAA,OACPC,IAAMN,KAAKM,KAAO,MAClBC,MAAQC,OAAOC,WAEbC,OAAQf,YAAYC,MAAOI,KAAKU,OAAOC,KAAK,KAC5CC,GAAIZ,KAAKY,IAAM,GACfC,OAAQb,KAAKa,QAEjBb,KAAKc,OAASd,KAAKc,OAAS,KAEhC,IAAId,KAAKI,QACLA,QAAUJ,KAAKI,YACZ,CACH,GAAMW,MAAOf,KAAKgB,GACdjB,MAAKgB,SAAWA,MAEhBV,IAAMR,YAAYkB,MACdV,KAEAD,QAAUa,UAAAC,QAAEC,MAAMd,KAClBe,YAAYrB,KAAMC,QAGlBD,KAAKgB,KAAKA,MACVM,QAAQN,KAAMhB,KAAMC,MAAMsB,KAAKL,UAAAC,QAAEK,WAIrClB,IAAMN,KAAKM,MACXA,IAAMA,KAAO,GACbD,QAAUa,UAAAC,QAAEC,MAAMd,KAClBe,YAAYrB,KAAMC,OAG1B,OAAO,EAAAiB,UAAAC,SAAEZ,IAAKC,OAAQP,KAAKwB,OAAQpB,QAASJ,KAAKyB,SAG/CJ,QAAU,SAACN,KAAMhB,KAAMC,MAA6B,GAAvB0B,YAAuBzB,UAAAC,OAAA,GAAAC,SAAAF,UAAA,IAAAA,UAAA,EACtD,IAAsB,mBAAX0B,SAA0BA,OAAOC,OAAQ,CAChD,GAAMC,gBAAiBF,OAAOG,cAAcf,KAC5C,OAAOY,QAAOC,OAAOC,gBAAgBP,KAAK,SAASS,MAC3CL,YACA7B,YAAYkB,MAAQgB,KACpBhC,KAAKiC,kBACLZ,YAAYrB,KAAMC,OAElBD,KAAKM,IAAI0B,QAOjB,MAHuB,mBAAZE,UAA2BA,QAAQC,KAC1CD,QAAQC,IAAI,qCAGZZ,KAAM,WACqB,mBAAZW,UAA2BA,QAAQC,KAC1CD,QAAQC,IAAI,uCAO1Bd,YAAc,QAAdA,aAAerB,KAAMC,MACvB,GAAKD,KAAKoC,mBAGNpC,KAAKiC,iBAAmBjC,KAAKoC,gBAAgBjC,QAAjD,CAGA,GAAMkC,MAAOrC,KAAKoC,gBAAgBpC,KAAKiC,gBAClCnC,aAAYuC,OAGbrC,KAAKiC,kBACLZ,YAAYrB,KAAMC,OAHlBqB,QAAQe,KAAMrC,KAAMC,MAAM,KAO5BqC,WACFC,WAAY,WAAe,GAAdtC,MAAcC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KAEvB,OADAgB,WAAAC,QAAEK,OAAOgB,SAAS,SAEdxB,KAAME,UAAAC,QAAEsB,KAAK,IACbnC,IAAKY,UAAAC,QAAEsB,KAAK,IACZL,gBAAiBnC,KAAKyC,QACtBT,gBAAiB,IAGzBU,KAAM,SAAC3C,MAAoB,GAAdC,MAAcC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KACvB,OAAOH,YAAWC,KAAMC,wBAIjBqC","file":"svg.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport 'polythene/svg/theme/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-svg'\n};\n\nconst globalCache = {};\n\nconst createView = (ctrl, opts = {}) => {\n    let content, svg;\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [CSS_CLASSES.block, opts.class].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    if (opts.content) {\n        content = opts.content;\n    } else {\n        const path = opts.src;\n        if (ctrl.path() !== path) {\n            // not the current svg\n            svg = globalCache[path];\n            if (svg) {\n                // exists in cache\n                content = m.trust(svg);\n                preloadNext(ctrl, opts);\n            } else {\n                // load new, then wait until file has been loaded\n                ctrl.path(path);\n                loadSvg(path, ctrl, opts).then(m.redraw);\n            }\n        } else {\n            // use the current svg\n            svg = ctrl.svg();\n            svg = svg || '';\n            content = m.trust(svg);\n            preloadNext(ctrl, opts);\n        }\n    }\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst loadSvg = (path, ctrl, opts, preloading = false) => {\n    if (typeof System !== \"undefined\" && System.import) {\n        const normalizedName = System.normalizeSync(path);\n        return System.import(normalizedName).then(function(data) {\n            if (preloading) {\n                globalCache[path] = data;\n                ctrl.preloadingIndex++;\n                preloadNext(ctrl, opts);\n            } else {\n                ctrl.svg(data);\n            }\n        });\n    } else {\n        if (typeof console !== \"undefined\" && console.log) {\n            console.log('polythene/svg: System not found.');\n        }\n        return {\n            then: function(){\n                if (typeof console !== \"undefined\" && console.log) {\n                    console.log('polythene/svg: System not found.');\n                }\n            }\n        }\n    }\n};\n\nconst preloadNext = (ctrl, opts) => {\n    if (!ctrl.preloadingItems) {\n        return;\n    }\n    if (ctrl.preloadingIndex >= ctrl.preloadingItems.length) {\n        return;\n    }\n    const next = ctrl.preloadingItems[ctrl.preloadingIndex];\n    if (!globalCache[next]) {\n        loadSvg(next, ctrl, opts, true);\n    } else {\n        ctrl.preloadingIndex++;\n        preloadNext(ctrl, opts);\n    }\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        m.redraw.strategy('none');\n        return {\n            path: m.prop(''),\n            svg: m.prop(''),\n            preloadingItems: opts.preload,\n            preloadingIndex: 0\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
{"version":3,"sources":["scroll-to.es6"],"names":["scrollTo","opts","element","direction","to","duration","which","Date","getTime","Promise","animateScroll","animating","requestAnimFrame","now","animationStart","start","easeInOutCubic","percentage","val","resolve","isServer","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","setTimeout","callback"],"mappings":"oEAMA,4L,wEAuBA,GAAMA,UAAW,WAAU,CACvB,GAAM,GAAUC,EAAKC,OAArB,CACM,EAA4B,YAAnB,KAAKC,SAAN,CAAoC,YAApC,CAAmD,WADjE,CAEM,EAAKF,EAAKG,EAFhB,CAGM,EAAW,MAAKC,QAHtB,CAIM,EAAQH,EAAQI,CAAR,CAJd,CAMM,EAAiB,GAAIC,KAAJ,GAAWC,OAAX,EANvB,CAOI,IAPJ,CAQA,MAAO,IAAIC,QAAJ,CAAY,WAAkB,CACjC,GAAM,GAAgB,QAAhBC,cAAgB,EAAW,CAC7B,GAAKC,CAAL,EAGAC,iBAAiBF,CAAjB,CAHA,CAIA,GAAM,GAAM,GAAIH,KAAJ,GAAWC,OAAX,EAAZ,CACM,EAAc,CAACK,EAAMC,CAAP,EAAyBT,CAD7C,CAEM,EAAMU,EAAQ,CAXbX,EAAKW,CAWQ,EAAS,iBAAOC,cAAP,CAAsBC,CAAtB,CAF7B,CAGAf,EAAQI,CAAR,EAAiBY,CAPjB,CAQkB,CAAd,GARJ,GASIhB,EAAQI,CAAR,EAAiBF,CATrB,CAUI,IAVJ,CAWIe,GAXJ,EAaH,CAdD,CAeAP,iBAAiBF,CAAjB,CACH,CAjBM,CAkBV,CA3BD,CA6BME,iBAAoB,UAAM,OAC5B,sBAAWQ,QAAX,EAD4B,QAIrBC,OAAOC,qBAAP,EAAgCD,OAAOE,2BAAvC,EAAsEF,OAAOG,wBAA7E,EAA0G,WAAY,CACzHH,OAAOI,UAAP,CAAkBC,CAAlB,CAA4B,IAAO,EAAnC,CACH,CACJ,CAPwB,EA7BzB,C,gBAsCe1B,Q","file":"scroll-to.js","sourcesContent":["/*\nAnimated scroll to a position.\nDerived from https://github.com/madebysource/animated-scrollto\nAdapted to Mithril and rewritten to es6.\n*/\n\nimport easing from 'polythene/common/easing';\nimport isomorphic from 'polythene/common/isomorphic';\n\n/*\nopts:\n    element: HTML Element\n    to: position\n    duration: seconds\n    direction: 'vertical' or 'horizontal'\n\n\nFunction returns a Promise:\n\n    scrollTo({\n        element: scroller,\n        to: left,\n        duration: .5,\n        direction: 'horizontal'\n    }).then(() => {\n        console.log('scroll done')\n    });\n\n*/\nconst scrollTo = (opts) => {\n    const element = opts.element;\n    const which = (opts.direction === 'horizontal') ? 'scrollLeft' : 'scrollTop';\n    const to = opts.to;\n    const duration = opts.duration * 1000;\n    const start = element[which];\n    const change = to - start;\n    const animationStart = new Date().getTime();\n    let animating = true;\n    return new Promise(function(resolve) {\n        const animateScroll = function() {\n            if (!animating) {\n                return;\n            }\n            requestAnimFrame(animateScroll);\n            const now = new Date().getTime();\n            const percentage = ((now - animationStart) / duration);\n            const val = start + change * easing.easeInOutCubic(percentage);\n            element[which] = val;\n            if (percentage >= 1) {\n                element[which] = to;\n                animating = false;\n                resolve();\n            }\n        };\n        requestAnimFrame(animateScroll);\n    });\n};\n\nconst requestAnimFrame = (() => {\n\tif(isomorphic.isServer()) {\n\t\treturn;\n\t}\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || (callback => {\n        window.setTimeout(callback, 1000 / 60);\n    });\n})();\n\nexport default scrollTo;\n"]}
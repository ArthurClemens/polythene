{"version":3,"sources":["events.es6"],"names":["listeners","throttle","isClient","window","args","wait","later","func","apply","context","setTimeout","s","subscribe","eventName","push","delay","listener","unsubscribe","indexOf","splice","index","emit","forEach","event","addEventListener","e"],"mappings":"oEAAA,wG,wEAEA,GAAMA,aAAN,CAGMC,SAAW,WAAiE,8DAAtD,IAAsD,0DAAtC,qBAAWC,QAAX,GAAuBC,MAAvB,GAAsC,CAC1E,IAD0E,CAE9E,MAAO,WAAa,mDAATC,CAAS,iBAIXC,CAJW,GACF,QAARC,MAAQ,EAAM,CAChBC,EAAKC,KAAL,CAAWC,CAAX,CAAoBL,CAApB,CACH,CAEG,EALY,CAMZ,IANY,CAOZM,WAAW,UAAM,CACb,IACH,CAFD,CAEGC,CAFH,CAPY,CAWnB,CACJ,CAjBD,CAmBMC,UAAY,eAAgC,CAC9CZ,UAAUa,CAAV,EAAuBb,UAAUa,CAAV,KADuB,CAE9Cb,UAAUa,CAAV,EAAqBC,IAArB,CAA0BC,EAAQd,SAASe,CAAT,CAAmBD,CAAnB,CAAR,CAAoCC,CAA9D,CACH,CAtBD,CAyBMC,YAAc,aAAyB,CACzC,GAAKjB,UAAUa,CAAV,CAAL,EAGA,GAAM,GAAQb,UAAUa,CAAV,EAAqBK,OAArB,CAA6BF,CAA7B,CAAd,CACY,CAAC,CAAT,EAJJ,EAKIhB,UAAUa,CAAV,EAAqBM,MAArB,CAA4BC,CAA5B,CAAmC,CAAnC,CALJ,CAOH,CAjCD,CAoCMC,KAAO,aAAsB,CAC1BrB,UAAUa,CAAV,CAD0B,EAI/Bb,UAAUa,CAAV,EAAqBS,OAArB,CAA6B,WAAc,CACvCN,EAASO,CAAT,CACH,CAFD,CAGH,CA3CD,CA6CG,qBAAWrB,QAAX,E,GACFC,OAAOqB,gBAAP,CAAwB,QAAxB,CAAkC,kBAAMH,MAAK,QAAL,CAAeI,CAAf,CAAN,CAAlC,C,CACAtB,OAAOqB,gBAAP,CAAwB,QAAxB,CAAkC,kBAAMH,MAAK,QAAL,CAAeI,CAAf,CAAN,CAAlC,C,CACAtB,OAAOqB,gBAAP,CAAwB,SAAxB,CAAmC,kBAAMH,MAAK,SAAL,CAAgBI,CAAhB,CAAN,CAAnC,C,kBAGc,CACXxB,iBADW,CAEXW,mBAFW,CAGXK,uBAHW,CAIXI,SAJW,C","file":"events.js","sourcesContent":["import isomorphic from 'polythene/common/isomorphic';\n\nconst listeners = {};\n\n// https://gist.github.com/Eartz/fe651f2fadcc11444549\nconst throttle = (func, s = 0.05, context = isomorphic.isClient()? window: {}) => {\n    let wait = false;\n    return (...args) => {\n        const later = () => {\n            func.apply(context, args);\n        };\n        if (!wait) {\n            later();\n            wait = true;\n            setTimeout(() => {\n                wait = false;\n            }, s);\n        }\n    };\n};\n\nconst subscribe = (eventName, listener, delay) => {\n    listeners[eventName] = listeners[eventName] || [];\n    listeners[eventName].push(delay ? throttle(listener, delay) : listener);\n};\n\n\nconst unsubscribe = (eventName, listener) => {\n    if (!listeners[eventName]) {\n        return;\n    }\n    const index = listeners[eventName].indexOf(listener);\n    if (index > -1) {\n        listeners[eventName].splice(index, 1);\n    }\n};\n\n\nconst emit = (eventName, event) => {\n    if (!listeners[eventName]) {\n        return;\n    }\n    listeners[eventName].forEach((listener) => {\n        listener(event);\n    });\n};\n\nif(isomorphic.isClient()) {\n\twindow.addEventListener('resize', e => (emit('resize', e)));\n\twindow.addEventListener('scroll', e => (emit('scroll', e)));\n\twindow.addEventListener('keydown', e => (emit('keydown', e)));\n}\n\nexport default {\n    throttle,\n    subscribe,\n    unsubscribe,\n    emit\n};\n"]}
{"version":3,"sources":["events.es6"],"names":["_isomorphic","require","listeners","throttle","func","s","arguments","length","undefined","context","_isomorphic2","default","isClient","window","wait","_len","args","Array","_key","later","apply","setTimeout","subscribe","eventName","listener","delay","push","unsubscribe","index","indexOf","splice","emit","event","forEach","addEventListener","e"],"mappings":"qJAAA,IAAAA,aAAAC,QAAA,gFAEMC,aAGAC,SAAW,SAACC,MAAgE,GAA1DC,GAA0DC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAtD,IAAMG,QAAgDH,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAtCI,aAAAC,QAAWC,WAAYC,UAC3DC,MAAO,CACX,OAAO,YAAa,IAAA,GAAAC,MAAAT,UAAAC,OAATS,KAASC,MAAAF,MAAAG,KAAA,EAAAA,KAAAH,KAAAG,OAATF,KAASE,MAAAZ,UAAAY,KAChB,IAAMC,OAAQ,WACVf,KAAKgB,MAAMX,QAASO,MAEnBF,QACDK,QACAL,MAAO,EACPO,WAAW,WACPP,MAAO,GACRT,MAKTiB,UAAY,SAACC,UAAWC,SAAUC,OACpCvB,UAAUqB,WAAarB,UAAUqB,eACjCrB,UAAUqB,WAAWG,KAAKD,MAAQtB,SAASqB,SAAUC,OAASD,WAI5DG,YAAc,SAACJ,UAAWC,UAC5B,GAAKtB,UAAUqB,WAAf,CAGA,GAAMK,OAAQ1B,UAAUqB,WAAWM,QAAQL,SACvCI,QAAQ,GACR1B,UAAUqB,WAAWO,OAAOF,MAAO,KAKrCG,KAAO,SAACR,UAAWS,OAChB9B,UAAUqB,YAGfrB,UAAUqB,WAAWU,QAAQ,SAACT,UAC1BA,SAASQ,SAIdtB,cAAAC,QAAWC,aACbC,OAAOqB,iBAAiB,SAAU,SAAAC,GAAA,MAAMJ,MAAK,SAAUI,KACvDtB,OAAOqB,iBAAiB,SAAU,SAAAC,GAAA,MAAMJ,MAAK,SAAUI,KACvDtB,OAAOqB,iBAAiB,UAAW,SAAAC,GAAA,MAAMJ,MAAK,UAAWI,uBAItDhC,SAAAA,SACAmB,UAAAA,UACAK,YAAAA,YACAI,KAAAA","file":"events.js","sourcesContent":["import isomorphic from 'polythene/common/isomorphic';\n\nconst listeners = {};\n\n// https://gist.github.com/Eartz/fe651f2fadcc11444549\nconst throttle = (func, s = 0.05, context = isomorphic.isClient()? window: {}) => {\n    let wait = false;\n    return (...args) => {\n        const later = () => {\n            func.apply(context, args);\n        };\n        if (!wait) {\n            later();\n            wait = true;\n            setTimeout(() => {\n                wait = false;\n            }, s);\n        }\n    };\n};\n\nconst subscribe = (eventName, listener, delay) => {\n    listeners[eventName] = listeners[eventName] || [];\n    listeners[eventName].push(delay ? throttle(listener, delay) : listener);\n};\n\n\nconst unsubscribe = (eventName, listener) => {\n    if (!listeners[eventName]) {\n        return;\n    }\n    const index = listeners[eventName].indexOf(listener);\n    if (index > -1) {\n        listeners[eventName].splice(index, 1);\n    }\n};\n\n\nconst emit = (eventName, event) => {\n    if (!listeners[eventName]) {\n        return;\n    }\n    listeners[eventName].forEach((listener) => {\n        listener(event);\n    });\n};\n\nif(isomorphic.isClient()) {\n\twindow.addEventListener('resize', e => (emit('resize', e)));\n\twindow.addEventListener('scroll', e => (emit('scroll', e)));\n\twindow.addEventListener('keydown', e => (emit('keydown', e)));\n}\n\nexport default {\n    throttle,\n    subscribe,\n    unsubscribe,\n    emit\n};\n"]}
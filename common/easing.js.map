{"version":3,"sources":["easing.es6"],"names":["linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"qFASIA,OAAQ,SAACC,GAAD,MAAQA,IAEhBC,WAAY,SAACD,GAAD,MAAQA,GAAIA,GAExBE,YAAa,SAACF,GAAD,MAAQA,IAAK,EAAIA,IAE9BG,cAAe,SAACH,GAAD,MAAQA,GAAI,GAAK,EAAIA,EAAIA,GAAI,GAAM,EAAI,EAAIA,GAAKA,GAE/DI,YAAa,SAACJ,GAAD,MAAQA,GAAIA,EAAIA,GAE7BK,aAAc,SAACL,GAAD,QAAWA,EAAKA,EAAIA,EAAI,GAEtCM,eAAgB,SAACN,GAAD,MAAQA,GAAI,GAAK,EAAIA,EAAIA,EAAIA,GAAKA,EAAI,IAAM,EAAIA,EAAI,IAAM,EAAIA,EAAI,GAAK,GAEvFO,YAAa,SAACP,GAAD,MAAQA,GAAIA,EAAIA,EAAIA,GAEjCQ,aAAc,SAACR,GAAD,MAAQ,MAAOA,EAAKA,EAAIA,EAAIA,GAE1CS,eAAgB,SAACT,GAAD,MAAQA,GAAI,GAAK,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,IAAMA,EAAKA,EAAIA,EAAIA,GAE5EU,YAAa,SAACV,GAAD,MAAQA,GAAIA,EAAIA,EAAIA,EAAIA,GAErCW,aAAc,SAACX,GAAD,MAAQ,KAAOA,EAAKA,EAAIA,EAAIA,EAAIA,GAE9CY,eAAgB,SAACZ,GAAD,MAAQA,GAAI,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,KAAQA,EAAKA,EAAIA,EAAIA,EAAIA","file":"easing.js","sourcesContent":["\n/*\nhttps://gist.github.com/gre/1650294\nEasing Functions - inspired from http://gizma.com/easing/\nOnly considering the t value for the range [0, 1] => [0, 1]\n*/\n\nexport default {\n    // no easing, no acceleration\n    linear: (t) => (t),\n    // accelerating from zero velocity\n    easeInQuad: (t) => (t * t),\n    // decelerating to zero velocity\n    easeOutQuad: (t) => (t * (2 - t)),\n    // acceleration until halfway, then deceleration\n    easeInOutQuad: (t) => (t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n    // accelerating from zero velocity\n    easeInCubic: (t) => (t * t * t),\n    // decelerating to zero velocity\n    easeOutCubic: (t) => ((--t) * t * t + 1),\n    // acceleration until halfway, then deceleration\n    easeInOutCubic: (t) => (t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1),\n    // accelerating from zero velocity\n    easeInQuart: (t) => (t * t * t * t),\n    // decelerating to zero velocity\n    easeOutQuart: (t) => (1 - (--t) * t * t * t),\n    // acceleration until halfway, then deceleration\n    easeInOutQuart: (t) => (t < .5 ? 8 * t * t * t * t : 1 - 8* (--t) * t * t * t),\n    // accelerating from zero velocity\n    easeInQuint: (t) => (t * t * t * t * t),\n    // decelerating to zero velocity\n    easeOutQuint: (t) => (1 + (--t) * t * t * t * t),\n    // acceleration until halfway, then deceleration\n    easeInOutQuint: (t) => (t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t)\n};\n"]}
{"version":3,"sources":["styler.es6"],"names":["remove","id","document","getElementById","old","parentNode","removeChild","add","styles","addToDocument","isServer","opts","window","documentRef","createElement","styleEl","setAttribute","forEach","Object","keys","styleList","length","sheet","style","appendChild","createTextNode","head"],"mappings":"oEAAA,+J,wEAGA,GAAMA,QAAS,WAAQ,CACnB,GAAIC,CAAJ,CAAQ,CACJ,GAAM,GAAMC,SAASC,cAAT,CAAwBF,CAAxB,CAAZ,CACIG,CAFA,EAGAA,EAAIC,UAAJ,CAAeC,WAAf,CAA2BF,CAA3B,CAEP,CACJ,CAPD,CAaMG,IAAM,WAAmB,2DAAXC,CAAW,mBAC3BC,4BAAc,CAACR,IAAD,CAAd,SAAuBO,CAAvB,EACH,CAfD,CAuBMC,cAAgB,WAAqB,2DAAXD,CAAW,mBAC1C,IAAG,qBAAWE,QAAX,EAAH,EAGG,GAAM,GAAKC,EAAKV,EAAhB,CACM,EAAcU,EAAKT,QAAL,EAAiBU,OAAOV,QAD5C,CAEAF,OAAOC,CAAP,CALH,CAMG,GAAM,GAAUY,EAAYC,aAAZ,CAA0B,OAA1B,CAAhB,CACIb,CAPP,EAQOc,EAAQC,YAAR,CAAqB,IAArB,CAA2Bf,CAA3B,CARP,CAUGO,EAAOS,OAAP,CAAe,WAAe,CAEtBC,OAAOC,IAAP,CAAYC,CAAZ,EAAuBC,MAFD,EAGtBD,EAAUH,OAAV,CAAkB,WAAW,CACzB,GACM,GAAQ,cAAIK,KAAJ,CADC,CAAC,UAAWC,CAAZ,CACD,CADd,CAEAR,EAAQS,WAAR,CAAoBX,EAAYY,cAAZ,CAA2BH,CAA3B,CAApB,CACH,CAJD,CAMP,CATD,CAVH,CAoBGT,EAAYa,IAAZ,CAAiBF,WAAjB,CAA6BT,CAA7B,CApBH,CAqBA,CA7CD,C,gBA+Ce,CACXR,OADW,CAEXE,2BAFW,CAGXT,aAHW,C","file":"styler.js","sourcesContent":["import j2c from 'j2c';\nimport isomorphic from 'polythene/common/isomorphic';\n\nconst remove = (id) => {\n    if (id) {\n        const old = document.getElementById(id);\n        if (old) {\n            old.parentNode.removeChild(old);\n        }\n    }\n};\n\n/*\n* id: identifier, used as HTMLElement id for the attached <style></style> element\n* styles: list of lists style Objects\n*/\nconst add = (id, ...styles) => {\n    addToDocument({id}, ...styles);\n};\n\n/*\n* opts: options object\n  * id: identifier, used as HTMLElement id for the attached <style></style> element\n  * document: document reference; default window.document\n* styles: list of lists style Objects\n*/\nconst addToDocument = (opts, ...styles) => {\n\tif(isomorphic.isServer()){\n\t\treturn;\n\t}\n    const id = opts.id;\n    const documentRef = opts.document || window.document;\n    remove(id);\n    const styleEl = documentRef.createElement('style');\n    if (id) {\n        styleEl.setAttribute('id', id);\n    }\n    styles.forEach((styleList) => {\n        // each style returns a list\n        if (Object.keys(styleList).length) {\n            styleList.forEach((style) => {\n                const scoped = {'@global': style};\n                const sheet = j2c.sheet(scoped);\n                styleEl.appendChild(documentRef.createTextNode(sheet));\n            });\n        }\n    });\n    documentRef.head.appendChild(styleEl);\n};\n\nexport default {\n    add,\n    addToDocument,\n    remove\n};\n"]}
{"version":3,"sources":["standalone.es6"],"names":["fs","require","browserify","sh","folders","commonUtils","includes","noRequires","common","font-roboto","layout","filterNoRequires","folder","formatRequire","path","requires","formatFn","str","components","concat","filter","map","utils","util","extra","include","writeRequires","callback","console","log","writeFile","join","prepare","mkdir","mv","teardown","rm","build","createBundle","entries","outfile","paths","transform","global","bundle","on","err","message","pipe","createWriteStream","e"],"mappings":"YAAA,IAAMA,IAAKC,QAAQ,MACbC,WAAaD,QAAQ,cACrBE,GAAKF,QAAQ,WAEbG,SAAW,cAAe,SAAU,OAAQ,WAAY,SAAU,SAAU,SAAU,UAAW,MAAO,cAAe,eAAgB,OAAQ,cAAe,SAAU,OAAQ,YAAa,OAAQ,eAAgB,YAAa,eAAgB,SAAU,SAAU,oBAAqB,SAAU,SAAU,UAAW,MAAO,SAAU,OAAQ,YAAa,QAAS,WAEzWC,aAAe,SAAU,QAAS,WAAY,eAAgB,gBAAiB,YAAa,SAAU,QAAS,mBAAoB,aAAc,oBAAqB,iBAEtKC,UAAY,oBAAqB,qBAAsB,wBAAyB,4BAA6B,sBAAuB,gCAAiC,+BAErKC,YACFC,OAAU,EACVC,cAAe,EACfC,OAAU,GAGRC,iBAAmB,SAACC,QAAD,OAAcL,WAAWK,SAE5CC,cAAgB,SAACC,MAAD,MAAA,YAAuBA,KAAvB,OAEhBC,SAAW,SAACC,UACdA,SAAWA,UAAa,SAACC,KAAD,MAAUA,KAClC,IAAMC,aAAcF,SAAS,YAAYG,OAAOf,QAAQgB,OAAOT,kBAAkBU,IAAI,SAACT,QAClF,MAAOI,UAAA,aAAsBJ,OAAtB,IAAgCA,WAErCU,OAASN,SAAS,cAAcG,OAAOd,YAAYgB,IAAI,SAACE,MAC1D,MAAOP,UAAA,oBAA6BO,SAElCC,MAAQlB,SAASe,IAAI,SAACI,SACxB,MAAOT,UAAA,aAAsBS,UAEjC,OAAOP,YAAWC,OAAOG,OAAOH,OAAOK,QAGrCE,cAAgB,SAACC,UACnBC,QAAQC,IAAI,4BACZ7B,GAAG8B,UAAU,oBAAqBf,SAASF,eAAekB,KAAK,MAAO,OAAQ,WAAA,MAAOH,SAAQC,IAAI,iCAAkCF,cAGjIK,QAAU,WACZJ,QAAQC,IAAI,sBACZ1B,GAAG8B,MAAM,KAAM,OACf7B,QAAQiB,IAAI,SAACT,QACTT,GAAG+B,GAAGtB,OAAQ,OAASA,UAE3BT,GAAG+B,GAAG,MAAO,aACbN,QAAQC,IAAI,4BAGVM,SAAW,WACbP,QAAQC,IAAI,uBACZ1B,GAAG+B,GAAG,YAAa,OACnB/B,GAAG+B,GAAG,QAAS,KACf/B,GAAGiC,GAAG,MAAO,OACbjC,GAAGiC,GAAG,MAAO,qBACbR,QAAQC,IAAI,6BAGVQ,MAAQ,WACVT,QAAQC,IAAI,mBACZ,IAAMS,cAAe,SAACC,QAASC,SAC3B,IACItC,YACIqC,QAASA,QACTE,OAAQ,IAAK,gBACbxC,QAASc,aAGZ2B,WACGC,QAAQ,GACT,aACFC,SACAC,GAAG,QAAS,SAASC,KAClBlB,QAAQC,IAAI,WAAaiB,IAAIC,WAEhCC,KAAKhD,GAAGiD,kBAAkBT,SAASK,GAAG,SAAUV,WAGrD,MAAOe,GACHf,YAIRG,eACI,qBACD,2BAGPZ,eAAc,WACVM,UACAK","file":"standalone.js","sourcesContent":["const fs = require('fs');\nconst browserify = require('browserify');\nconst sh = require('shelljs');\n\nconst folders = ['base-button', 'button', 'card', 'checkbox', 'common', 'config', 'dialog', 'element', 'fab', 'font-roboto', 'header-panel', 'icon', 'icon-button', 'layout', 'list', 'list-tile', 'menu', 'notification', 'polythene', 'radio-button', 'ripple', 'search', 'selection-control', 'shadow', 'slider', 'spinner', 'svg', 'switch', 'tabs', 'textfield', 'theme', 'toolbar'];\n\nconst commonUtils = ['easing', 'mixin', 'multiple', 'no-tap-delay', 'object.assign', 'scroll-to', 'styler', 'timer', 'transition-event', 'transition', 'validation-helper', 'webfontloader'];\n\nconst includes = ['layout/theme/flex', 'layout/theme/theme', 'notification/snackbar', 'notification/notification', 'spinner/ios-spinner', 'spinner/indeterminate-spinner', 'spinner/determinate-spinner'];\n\nconst noRequires = {\n    'common': 1,\n    'font-roboto': 1,\n    'layout': 1\n};\n\nconst filterNoRequires = (folder) => (!noRequires[folder]);\n\nconst formatRequire = (path) => (`require('${path}');`);\n\nconst requires = (formatFn) => {\n    formatFn = formatFn || ((str) => (str));\n    const components = [formatFn('mithril')].concat(folders.filter(filterNoRequires).map((folder) => {\n        return formatFn(`polythene/${folder}/${folder}`);\n    }));\n    const utils = [formatFn('fastclick')].concat(commonUtils.map((util) => {\n        return formatFn(`polythene/common/${util}`);\n    }));\n    const extra = includes.map((include) => {\n        return formatFn(`polythene/${include}`);\n    });\n    return components.concat(utils).concat(extra);\n};\n\nconst writeRequires = (callback) => {\n    console.log('standalone writeRequires');\n    fs.writeFile('standalone-src.js', requires(formatRequire).join('\\r'), 'utf8', () => (console.log('standalone writeRequires done'), callback()));\n};\n\nconst prepare = () => {\n    console.log('standalone prepare');\n    sh.mkdir('-p', 'tmp');\n    folders.map((folder) => {\n        sh.mv(folder, 'tmp/' + folder);\n    });\n    sh.mv('tmp', 'polythene');\n    console.log('standalone prepare done');\n};\n\nconst teardown = () => {\n    console.log('standalone teardown');\n    sh.mv('polythene', 'tmp');\n    sh.mv('tmp/*', '.');\n    sh.rm('-rf', 'tmp');\n    sh.rm('-rf', 'standalone-src.js');\n    console.log('standalone teardown done');\n};\n\nconst build = () => {\n    console.log('standalone build');\n    const createBundle = (entries, outfile) => {\n        try {\n            browserify({\n                entries: entries,\n                paths: ['.', 'node_modules'],\n                require: requires()\n            })\n            // .external('mithril')\n            .transform({\n                global: true\n            }, 'uglifyify')\n            .bundle()\n            .on('error', function(err) {\n                console.log('Error : ' + err.message);\n            })\n            .pipe(fs.createWriteStream(outfile).on('finish', teardown))\n            ;\n        }\n        catch (e) {\n            teardown();\n        }\n    };\n\n    createBundle([\n        'standalone-src.js'\n    ], 'polythene-standalone.js');\n};\n\nwriteRequires(() => {\n    prepare();\n    build();\n});\n"]}
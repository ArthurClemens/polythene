{"version":3,"sources":["layout.es6"],"names":["_config","require","_mixin","unifySize","config","size","min_size","widthClass","sizeStr","toString","replace","widthStyle","s","_defineProperty","width","size_factor","max-width","createStyles",".pe-menu","_mixin2","default","vendorize","transition-timing-function","_config2","prefixes_transition","transition-property","sizes","map","z-index","z_menu","opacity","position","min-width","grid_unit_menu","&.pe-menu--width-auto","&.pe-menu--visible","&.pe-menu--permanent"," .pe-menu__content","border-radius","border_radius","unit_screen_size_large","max_size_small_screen"],"mappings":"yTAAA,IAAAA,SAAAC,QAAA,oEACAC,OAAAD,QAAA,iEAEME,UAAY,SAACC,OAAQC,MACvB,MAAQA,MAAOD,OAAOE,SAAYF,OAAOE,SAAWD,MAGlDE,WAAa,SAACH,OAAQC,MACxB,GAAMG,SAAUH,KAAKI,WAAWC,QAAQ,IAAK,IAC7C,OAAO,kBAAoBF,SAGzBG,WAAa,SAACP,OAAQC,MACxB,GAAMO,GAAIT,UAAUC,OAAQC,KAC5B,OAAAQ,oBACK,KAAON,WAAWH,OAAQQ,IACvBE,MAAOV,OAAOW,YAAcH,EAAI,KAChCI,YAAa,UAKnBC,aAAe,SAACb,QAClB,QACIc,YAEIC,QAAAC,QAAMC,WACFC,6BAA8B,YAC/BC,SAAAH,QAAOI,qBACVL,QAAAC,QAAMC,WACFI,sBAAuB,WACxBF,SAAAH,QAAOI,qBACVpB,OAAOsB,MAAMC,IAAI,SAACtB,MACd,MAAOM,YAAWP,OAAQC,QATtBQ,iBAYJe,UAAWL,SAAAH,QAAOS,OAClBC,QAAS,EACTC,SAAU,WACVjB,MAAO,OACPkB,YAAaT,SAAAH,QAAOa,eAAiB7B,OAAOE,SAAW,KAEvD4B,yBACIpB,MAAO,QAGXqB,sBACIL,QAAS,GAGbM,wBACIL,SAAU,WACVD,QAAS,GAGbO,sBACIvB,MAAO,OACPwB,gBAAiBlC,OAAOmC,cAAgB,OAG3C,sBAAwBhB,SAAAH,QAAOoB,uBAAyB,OACrDxB,YAAaZ,OAAOqC,sBAAwBlB,SAAAH,QAAOa,eAAiB,2BAQzE,SAAC7B,QAAD,MAAae,SAAAC,QAAMH,aAAab,OAAQa","file":"layout.js","sourcesContent":["import common from 'polythene/config/config';\nimport mixin from 'polythene/common/mixin';\n\nconst unifySize = (config, size) => {\n    return (size < config.min_size) ? config.min_size : size;\n};\n\nconst widthClass = (config, size) => {\n    const sizeStr = size.toString().replace('.', '-');\n    return 'pe-menu--width-' + sizeStr;\n};\n\nconst widthStyle = (config, size) => {\n    const s = unifySize(config, size);\n    return {\n        ['&.' + widthClass(config, s)]: {\n            width: config.size_factor * s + 'px',\n            'max-width': '100%'\n        }\n    };\n};\n\nconst createStyles = (config) => {\n    return [{\n        '.pe-menu': [\n            // transition-duration set in js\n            mixin.vendorize({\n                'transition-timing-function': 'ease-out'\n            }, common.prefixes_transition),\n            mixin.vendorize({\n                'transition-property': 'opacity'\n            }, common.prefixes_transition),\n            config.sizes.map((size) => {\n                return widthStyle(config, size);\n            }),\n            {\n                'z-index': common.z_menu,\n                opacity: 0,\n                position: 'absolute',\n                width: '100%',\n                'min-width': common.grid_unit_menu * config.min_size + 'px',\n\n                '&.pe-menu--width-auto': {\n                    width: 'auto'\n                },\n\n                '&.pe-menu--visible': {\n                    opacity: 1\n                },\n\n                '&.pe-menu--permanent': {\n                    position: 'relative',\n                    opacity: 1\n                },\n\n                ' .pe-menu__content': {\n                    width: '100%',\n                    'border-radius': config.border_radius + 'px'\n                },\n\n                ['@media (max-width: ' + common.unit_screen_size_large + 'px)']: {\n                    'max-width': config.max_size_small_screen * common.grid_unit_menu + 'px'\n                }\n            }\n        ]\n\n    }];\n};\n\nexport default (config) => (mixin.createStyles(config, createStyles));\n"]}
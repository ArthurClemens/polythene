{"version":3,"sources":["textfield.es6"],"names":["require","_mithril","startEventType","window","PointerEvent","DocumentTouch","document","CSS_CLASSES","block","inputArea","input","label","counter","help","focusHelp","error","errorPlaceholder","stateFocused","stateDisabled","stateReadonly","stateInvalid","stateDirty","hasFloatingLabel","isDense","isRequired","hideRequiredChar","hasFullWidth","hasCounter","hideSpinner","hideClear","hideValidation","validateCustom","ctrl","opts","state","validate","value","invalid","valid","message","validateCounter","length","validateHTML","inputEl","checkValidity","getValidStatus","status","undefined","touched","isInvalid","validateResetOnClear","validateAtStart","previousInvalid","setTimeout","_mithril2","default","redraw","checkDirty","isDirty","toString","updateState","notifyState","getState","focus","dirty","el","ignoreEvent","name","ignoreEvents","indexOf","createView","arguments","tag","type","inputTag","multiline","showError","validates","min","max","minlength","required","pattern","inactive","disabled","readonly","onBlur","e","target","classList","remove","props","class","floatingLabel","dense","fullWidth","hideRequiredMark","join","id","config","inited","context","vdom","content","_defineProperty","Object","assign","onclick","onfocus","add","oninput","validateOnInput","onkeydown","which","blur","addEventListener","onunload","removeEventListener","events","maxlength","autofocus","tabindex","rows","before","after","component","controller","prop","hasFocus","v","view"],"mappings":"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","file":"textfield.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport 'polythene/textfield/theme/theme';\n\nlet startEventType = 'mousedown';\nif(typeof window !== \"undefined\") {\n\tstartEventType = window.PointerEvent ? 'pointerdown' : (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) ? 'touchstart' : 'mousedown';\n}\n\nconst CSS_CLASSES = {\n    block: 'pe-textfield',\n    inputArea: 'pe-textfield__input-area',\n    input: 'pe-textfield__input',\n    label: 'pe-textfield__label',\n    counter: 'pe-textfield__counter',\n    help: 'pe-textfield__help',\n    focusHelp: 'pe-textfield__help-focus',\n    error: 'pe-textfield__error',\n    errorPlaceholder: 'pe-textfield__error-placeholder',\n    stateFocused: 'pe-textfield--focused',\n    stateDisabled: 'pe-textfield--disabled',\n    stateReadonly: 'pe-textfield--readonly',\n    stateInvalid: 'pe-textfield--invalid',\n    stateDirty: 'pe-textfield--dirty',\n    hasFloatingLabel: 'pe-textfield--floating-label',\n    isDense: 'pe-textfield--dense',\n    isRequired: 'pe-textfield--required',\n    hideRequiredChar: 'pe-textfield--no-char',\n    hasFullWidth: 'pe-textfield--full-width',\n    hasCounter: 'pe-textfield--counter',\n    hideSpinner: 'pe-textfield--hide-spinner',\n    hideClear: 'pe-textfield--hide-clear',\n    hideValidation: 'pe-textfield--hide-validation'\n};\n\nconst validateCustom = (ctrl, opts) => {\n    const state = opts.validate(ctrl.value);\n    return {\n        invalid: (state && !state.valid),\n        message: (state && state.error)\n    };\n};\n\nconst validateCounter = (ctrl, opts) => {\n    return {\n        invalid: (ctrl.value.length > opts.counter),\n        message: opts.error\n    };\n};\n\nconst validateHTML = (ctrl, opts) => {\n    return {\n        invalid: !ctrl.inputEl().checkValidity(),\n        message: opts.error\n    };\n};\n\nconst getValidStatus = (ctrl, opts) => {\n    let status = {\n        invalid: false,\n        message: undefined\n    };\n\n    // validateResetOnClear: reset validation when field is cleared\n    if (ctrl.touched && ctrl.isInvalid && ctrl.value.length === 0 && opts.validateResetOnClear) {\n        ctrl.touched = false;\n        ctrl.isInvalid = false;\n        ctrl.error = undefined;\n    }\n\n    if (!status.invalid && opts.counter) {\n        status = validateCounter(ctrl, opts);\n    }\n    if (!status.invalid && ctrl.inputEl() && ctrl.inputEl().checkValidity) {\n        status = validateHTML(ctrl, opts);\n    }\n    if (!status.invalid && opts.validate) {\n        status = validateCustom(ctrl, opts);\n    }\n    return status;\n};\n\nconst checkValidity = (ctrl, opts) => {\n    // default\n    const status = (!ctrl.touched && !opts.validateAtStart)\n        ? {\n            invalid: false,\n            message: undefined\n        }\n        : getValidStatus(ctrl, opts);\n    const previousInvalid = ctrl.isInvalid;\n    ctrl.error = status.message;\n    ctrl.isInvalid = status.invalid;\n    if (status.invalid !== previousInvalid) {\n        setTimeout(m.redraw, 0);\n    }\n\n    if (!status.invalid) {\n        ctrl.error = undefined;\n    }\n};\n\n// dirty = contains text\nconst checkDirty = (ctrl) => {\n    ctrl.isDirty = (ctrl.value.toString().length > 0);\n};\n\nconst updateState = (ctrl, opts) => {\n    checkValidity(ctrl, opts);\n    checkDirty(ctrl);\n};\n\nconst notifyState = (ctrl, opts) => {\n    if (opts.getState) {\n        // get status directly without updating controller\n        const status = getValidStatus(ctrl, opts);\n        opts.getState({\n            focus: ctrl.focus(),\n            dirty: ctrl.isDirty,\n            value: ctrl.value,\n            el: ctrl.inputEl(),\n            invalid: status.invalid,\n            error: status.error\n        });\n    }\n};\n\nconst ignoreEvent = (opts, name) => (opts.ignoreEvents && opts.ignoreEvents.indexOf(name) !== -1);\n\nconst createView = (ctrl, opts = {}) => {\n    // Early state update to prevent a flash (which would happen if the update is done in config)\n    updateState(ctrl, opts);\n\n    const isInvalid = ctrl.isInvalid;\n    const tag = opts.tag || 'div';\n    const type = (!opts.type || opts.type === 'submit' || opts.type === 'search') ? 'text' : opts.type;\n    const inputTag = opts.multiline ? 'textarea' : 'input';\n    const showError = isInvalid && ctrl.error;\n    const validates = opts.validate || opts.min || opts.max || opts.minlength || opts.required || opts.pattern;\n    const inactive = opts.disabled || opts.readonly;\n\n    if (opts.focus && !ctrl.focus() && !inactive) {\n        ctrl.focus(true);\n        if (ctrl.inputEl()) {\n            ctrl.inputEl().focus();\n        }\n    }\n\n    // Only update from outside if the field is not being edited\n    if (typeof opts.value === 'function' && ctrl.inputEl() && !ctrl.focus() && !inactive) {\n        const value = opts.value();\n        ctrl.value = value;\n        ctrl.touched = true;\n        updateState(ctrl, opts);\n        notifyState(ctrl, opts);\n        ctrl.inputEl().value = value;\n    }\n\n    const onBlur = (e) => {\n        ctrl.focus(false);\n        ctrl.touched = true;\n        ctrl.value = e.target.value;\n        updateState(ctrl, opts);\n        notifyState(ctrl, opts);\n        // same principle as onfocus\n        ctrl.el.classList.remove(CSS_CLASSES.stateFocused);\n    };\n\n    const props = {\n        class: [\n            CSS_CLASSES.block,\n            (isInvalid ? CSS_CLASSES.stateInvalid : ''),\n            (ctrl.focus() ? CSS_CLASSES.stateFocused : ''),\n            (opts.floatingLabel ? CSS_CLASSES.hasFloatingLabel : ''),\n            (opts.disabled ? CSS_CLASSES.stateDisabled : ''),\n            (opts.readonly ? CSS_CLASSES.stateReadonly : ''),\n            (ctrl.isDirty ? CSS_CLASSES.stateDirty : ''),\n            (opts.dense ? CSS_CLASSES.isDense : ''),\n            (opts.required ? CSS_CLASSES.isRequired : ''),\n            (opts.fullWidth ? CSS_CLASSES.hasFullWidth : ''),\n            (opts.counter ? CSS_CLASSES.hasCounter : ''),\n            (opts.hideSpinner !== false ? CSS_CLASSES.hideSpinner : ''),\n            (opts.hideClear !== false ? CSS_CLASSES.hideClear : ''),\n            (opts.hideValidation ? CSS_CLASSES.hideValidation : ''),\n            (opts.hideRequiredMark ? CSS_CLASSES.hideRequiredChar : ''),\n            opts.class\n        ].join(' '),\n        id: opts.id || '',\n        config: (el, inited, context, vdom) => {\n            if (inited) {\n                return;\n            }\n            if (opts.config) {\n                opts.config(el, inited, context, vdom);\n            }\n            ctrl.el = el;\n            if (!inactive) {\n                updateState(ctrl, opts);\n            }\n        }\n    };\n\n\n    const content = [\n        m('div', {\n            class: CSS_CLASSES.inputArea\n        }, [\n            opts.label ? m('label', {\n                class: CSS_CLASSES.label,\n                // In IE10 the label catches click events on the field\n                // the function causes the input to get focus\n\n                ['on' + startEventType]: () => {\n                    if (!inactive) {\n                        setTimeout(() => {\n                            ctrl.inputEl().focus();\n                        }, 0);\n                    }\n                }\n            }, opts.label) : null,\n            m(inputTag, Object.assign(\n                {},\n                {\n                    class: CSS_CLASSES.input,\n                    type,\n                    name: opts.name || '',\n                    disabled: opts.disabled\n                },\n\n                (!ignoreEvent(opts, 'onclick'))\n                    ? {\n                        onclick: () => {\n                            if (inactive) {\n                                return;\n                            }\n                            // in case the browser does not give the field focus,\n                            // for instance when the user tapped to the current field off screen\n                            ctrl.focus(true);\n                            notifyState(ctrl, opts);\n                        }\n                    }\n                    : null,\n\n                (!ignoreEvent(opts, 'onfocus'))\n                    ? {\n                        onfocus: () => {\n                            if (inactive) {\n                                return;\n                            }\n                            ctrl.focus(true);\n                            // set CSS class manually in case field gets focus but is off screen\n                            // and no redraw is triggered\n                            // at the next redraw ctrl.focus() will be read and the focus class be set\n                            // in the props.class statement\n                            if (ctrl.el) {\n                                ctrl.el.classList.add(CSS_CLASSES.stateFocused);\n                            }\n                            notifyState(ctrl, opts);\n                        }\n                    }\n                    : null,\n\n                // onblur defined in config\n\n                (!ignoreEvent(opts, 'oninput'))\n                    ? {\n                        oninput: (e) => {\n                            // default input event\n                            // may be overwritten by opts.events\n                            ctrl.value = e.target.value;\n                            // Don't set ctrl.touched to true to prevent error messages popping up while typing\n                            if (opts.validateOnInput) {\n                                ctrl.touched = true;\n                            }\n                            updateState(ctrl, opts);\n                            notifyState(ctrl, opts);\n                            if (opts.oninput) {\n                                opts.oninput(ctrl.value, e);\n                            }\n                        }\n                    }\n                    : null,\n\n                (!ignoreEvent(opts, 'onkeydown'))\n                    ? {\n                        onkeydown: (e) => {\n                            if (e.which === 13) {\n                                // ENTER\n                                ctrl.touched = true;\n                                updateState(ctrl, opts);\n                                notifyState(ctrl, opts);\n                            } else if (e.which === 27) {\n                                // ESCAPE\n                                ctrl.inputEl().blur(e);\n                            } else if (e.which === 9) {\n                                // TAB\n                                // Update after the blur event when TAB is used to leave the field and no other field will get focus.\n                                // Safari only needs 1 tick, but Chrome needs more than 150ms to create a distinctive new redraw event.\n                                // But we also may have buttons that change place (search field), a large timeout works better in general.\n                                setTimeout(() => {\n                                    m.redraw();\n                                    setTimeout(m.redraw, 250);\n                                }, 1);\n                            }\n                        }\n                    }\n                    : null,\n\n                {\n                    config: (el, inited, context) => {\n                        if (inited) {\n                            return;\n                        }\n                        ctrl.inputEl(el);\n                        el.value = ctrl.value;\n                        notifyState(ctrl, opts);\n                        if (!inactive) {\n                            if (!ignoreEvent(opts, 'onblur')) {\n                                // use event delegation for the blur event\n                                // so that click events bubble up\n                                // http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n                                el.addEventListener('blur', onBlur, true);\n                                context.onunload = function() {\n                                    el.removeEventListener('blur', onBlur, true);\n                                };\n                            }\n                        }\n                    }\n                },\n                opts.events ? opts.events : null, // NOTE: may overwrite oninput\n                (opts.readonly !== undefined) ? {readonly: true} : null,\n                (opts.pattern !== undefined) ? {pattern: opts.pattern} : null,\n                (opts.maxlength !== undefined) ? {maxlength: opts.maxlength} : null,\n                (opts.minlength !== undefined) ? {minlength: opts.minlength} : null,\n                (opts.max !== undefined) ? {max: opts.max} : null,\n                (opts.min !== undefined) ? {min: opts.min} : null,\n                (opts.autofocus !== undefined) ? {autofocus: opts.autofocus} : null,\n                (opts.required !== undefined) ? {required: opts.required} : null,\n                (opts.tabindex !== undefined) ? {tabindex: opts.tabindex} : null,\n                (opts.rows !== undefined) ? {rows: opts.rows} : null\n            ))\n        ]),\n        opts.counter ? m('div', {class: CSS_CLASSES.counter}, ctrl.value.length + ' / ' + opts.counter) : null,\n        (opts.help && !showError) ? m('div', {\n            class: [CSS_CLASSES.help, opts.focusHelp ? CSS_CLASSES.focusHelp : ''].join(' ')\n        }, opts.help) : null,\n        showError\n            ? m('div', {class: CSS_CLASSES.error}, ctrl.error)\n            : (validates && !opts.help)\n                ? m('div', {class: CSS_CLASSES.errorPlaceholder})\n                : null\n    ];\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        let value,\n            isInvalid = false,\n            touched = false, // true when any change is made\n            error = opts.error || '',\n            el,\n            inputEl = m.prop(),\n            hasFocus = opts.focus || false;\n\n        if (typeof opts.value === 'function') {\n            const v = opts.value();\n            value = (v !== undefined) ? v : '';\n        } else {\n            value = (opts.value !== undefined) ? opts.value : '';\n        }\n        if (value !== '') {\n            touched = true;\n        }\n\n        const focus = (state) => {\n            // read\n            if (state === undefined) {\n                return hasFocus;\n            }\n            // write\n            hasFocus = state;\n        };\n\n        return {\n            value,\n            error,\n            el,\n            inputEl,\n            focus,\n            isInvalid,\n            touched\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
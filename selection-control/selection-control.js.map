{"version":3,"sources":["selection-control.es6"],"names":["require","_mithril","CSS_CLASSES","block","label","input","box","on","off","disabled","inactive","small","regular","medium","large","typeClasses","classForType","mode","arguments","length","undefined","createView","ctrl","opts","checked","setChecked","selectable","tag","name","props","Object","assign","class","defaultClass","size","join","id","config","el","inited","context","vdom","events","content","_mithril2","default","value","type","tabindex","setInputEl","onclick","toggle","selectionView","before","after","component","controller","defaultChecked","_value","inputEl","setInputElChecked","isChecked","getOptsChecked","v","getState","view"],"mappings":"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","file":"selection-control.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport 'polythene/selection-control/theme/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-control',\n    label: 'pe-control__label',\n    input: 'pe-control__input',\n    box: 'pe-control__box',\n    on: 'pe-control--on',\n    off: 'pe-control--off',\n    disabled: 'pe-control--disabled',\n    inactive: 'pe-control--inactive',\n    small: 'pe-control--small',\n    regular: 'pe-control--regular',\n    medium: 'pe-control--medium',\n    large: 'pe-control--large'\n};\n\nconst typeClasses = {\n    small: CSS_CLASSES.small,\n    regular: CSS_CLASSES.regular,\n    medium: CSS_CLASSES.medium,\n    large: CSS_CLASSES.large\n};\n\nconst classForType = (mode = 'regular') => {\n    return typeClasses[mode];\n};\n\nconst createView = (ctrl, opts = {}) => {\n    if (typeof opts.checked === 'function') {\n        ctrl.setChecked(opts.checked());\n    }\n    const checked = ctrl.checked();\n    const selectable = opts.selectable(checked);\n    const inactive = opts.disabled || !selectable;\n    const tag = opts.tag || 'div';\n    const name = opts.name || '';\n    const props = Object.assign(\n        {},\n        {\n            class: [\n                CSS_CLASSES.block,\n                opts.defaultClass,\n                (checked ? CSS_CLASSES.on : CSS_CLASSES.off),\n                (opts.disabled ? CSS_CLASSES.disabled: null),\n                (inactive ? CSS_CLASSES.inactive: null),\n                classForType(opts.size),\n                opts.class\n            ].join(' '),\n            id: opts.id || '',\n            config: (el, inited, context, vdom) => {\n                if (inited) {\n                    return;\n                }\n                if (opts.config) {\n                    opts.config(el, inited, context, vdom);\n                }\n            }\n        },\n        opts.events ? opts.events : null\n    );\n    const content = [\n        m('input', {\n            class: CSS_CLASSES.input,\n            name,\n            value: ctrl.value(),\n            type: opts.type, // set by checkbox / radio-button\n            tabindex: -1, // set in selectionView / icon-button\n            checked,\n            config: (el, inited) => {\n                if (inited) return;\n                ctrl.setInputEl(el);\n            }\n        }),\n        m('label', Object.assign(\n            {},\n            {\n                class: CSS_CLASSES.label,\n                tabindex: -1, // set in selectionView\n            },\n            inactive\n                ? null\n                : {\n                    onclick: () => (ctrl.toggle())\n                }\n        ), [\n            opts.selectionView ? opts.selectionView(checked, opts) : null,\n            opts.label ? m('span', opts.label) : null\n        ])\n    ];\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        // Because this module also supports radio buttons (paired control elements)\n        // we won't keep a separate 'checked' value but instead keep the checked value\n        // as a HTMLElement checked state.\n        const defaultChecked = false;\n        let value = opts.value || '1';\n        let inputEl;\n\n        const setInputElChecked = (isChecked) => {\n            if (inputEl) {\n                inputEl.checked = isChecked;\n            }\n        };\n\n        const getOptsChecked = () => {\n            if (typeof opts.checked === 'function') {\n                const v = opts.checked();\n                return (v !== undefined) ? v : defaultChecked;\n            } else {\n                return (opts.checked !== undefined) ? opts.checked : defaultChecked;\n            }\n        };\n\n        const setInputEl = (el) => {\n            inputEl = el;\n            setInputElChecked(getOptsChecked());\n        };\n\n        const setChecked = (isChecked) => {\n            setInputElChecked(isChecked);\n            if (opts.getState) {\n                opts.getState({\n                    checked: inputEl ? inputEl.checked : getOptsChecked(),\n                    value,\n                    el: inputEl,\n                });\n            }\n        };\n\n        const toggle = () => (setChecked(!inputEl.checked));\n\n        return {\n            setInputEl,\n            setChecked,\n            checked: () => (inputEl ? inputEl.checked : getOptsChecked()),\n            toggle,\n            value: () => (value)\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
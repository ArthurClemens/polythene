{"version":3,"sources":["selection-control.es6"],"names":["CSS_CLASSES","block","label","input","box","on","off","disabled","inactive","small","regular","medium","large","typeClasses","classForType","mode","createView","opts","checked","ctrl","setChecked","selectable","tag","name","Object","assign","class","defaultClass","size","join","id","config","inited","el","context","vdom","events","value","type","setInputEl","tabindex","onclick","toggle","selectionView","props","before","content","after","component","controller","setInputElChecked","inputEl","isChecked","getOptsChecked","v","getState","view"],"mappings":"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","file":"selection-control.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport 'polythene/selection-control/theme/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-control',\n    label: 'pe-control__label',\n    input: 'pe-control__input',\n    box: 'pe-control__box',\n    on: 'pe-control--on',\n    off: 'pe-control--off',\n    disabled: 'pe-control--disabled',\n    inactive: 'pe-control--inactive',\n    small: 'pe-control--small',\n    regular: 'pe-control--regular',\n    medium: 'pe-control--medium',\n    large: 'pe-control--large'\n};\n\nconst typeClasses = {\n    small: CSS_CLASSES.small,\n    regular: CSS_CLASSES.regular,\n    medium: CSS_CLASSES.medium,\n    large: CSS_CLASSES.large\n};\n\nconst classForType = (mode = 'regular') => {\n    return typeClasses[mode];\n};\n\nconst createView = (ctrl, opts = {}) => {\n    if (typeof opts.checked === 'function') {\n        ctrl.setChecked(opts.checked());\n    }\n    const checked = ctrl.checked();\n    const selectable = opts.selectable(checked);\n    const inactive = opts.disabled || !selectable;\n    const tag = opts.tag || 'div';\n    const name = opts.name || '';\n    const props = Object.assign(\n        {},\n        {\n            class: [\n                CSS_CLASSES.block,\n                opts.defaultClass,\n                (checked ? CSS_CLASSES.on : CSS_CLASSES.off),\n                (opts.disabled ? CSS_CLASSES.disabled: null),\n                (inactive ? CSS_CLASSES.inactive: null),\n                classForType(opts.size),\n                opts.class\n            ].join(' '),\n            id: opts.id || '',\n            config: (el, inited, context, vdom) => {\n                if (inited) {\n                    return;\n                }\n                if (opts.config) {\n                    opts.config(el, inited, context, vdom);\n                }\n            }\n        },\n        opts.events ? opts.events : null\n    );\n    const content = [\n        m('input', {\n            class: CSS_CLASSES.input,\n            name,\n            value: ctrl.value(),\n            type: opts.type, // set by checkbox / radio-button\n            tabindex: -1, // set in selectionView / icon-button\n            checked,\n            config: (el, inited) => {\n                if (inited) return;\n                ctrl.setInputEl(el);\n            }\n        }),\n        m('label', Object.assign(\n            {},\n            {\n                class: CSS_CLASSES.label,\n                tabindex: -1, // set in selectionView\n            },\n            inactive\n                ? null\n                : {\n                    onclick: () => (ctrl.toggle())\n                }\n        ), [\n            opts.selectionView ? opts.selectionView(checked, opts) : null,\n            opts.label ? m('span', opts.label) : null\n        ])\n    ];\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        // Because this module also supports radio buttons (paired control elements)\n        // we won't keep a separate 'checked' value but instead keep the checked value\n        // as a HTMLElement checked state.\n        const defaultChecked = false;\n        let value = opts.value || '1';\n        let inputEl;\n\n        const setInputElChecked = (isChecked) => {\n            if (inputEl) {\n                inputEl.checked = isChecked;\n            }\n        };\n\n        const getOptsChecked = () => {\n            if (typeof opts.checked === 'function') {\n                const v = opts.checked();\n                return (v !== undefined) ? v : defaultChecked;\n            } else {\n                return (opts.checked !== undefined) ? opts.checked : defaultChecked;\n            }\n        };\n\n        const setInputEl = (el) => {\n            inputEl = el;\n            setInputElChecked(getOptsChecked());\n        };\n\n        const setChecked = (isChecked) => {\n            setInputElChecked(isChecked);\n            if (opts.getState) {\n                opts.getState({\n                    checked: inputEl ? inputEl.checked : getOptsChecked(),\n                    value,\n                    el: inputEl,\n                });\n            }\n        };\n\n        const toggle = () => (setChecked(!inputEl.checked));\n\n        return {\n            setInputEl,\n            setChecked,\n            checked: () => (inputEl ? inputEl.checked : getOptsChecked()),\n            toggle,\n            value: () => (value)\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
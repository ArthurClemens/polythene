{"version":3,"sources":["icon-selection.es6"],"names":["CSS_CLASSES","box","button","buttonOn","buttonOff","createIcon","Object","assign","opts","onOffType","msvg","theme","class","icon","size","type","createSelection","selectable","checked","component","tag","content","ripple","center","disabled","inactive","iconButton"],"mappings":"8GAEA,+P,wEAIA,GAAMA,aAAc,CAChBC,IAAK,iBADW,CAEhBC,OAAQ,oBAFQ,CAGhBC,SAAU,wBAHM,CAIhBC,UAAW,yBAJK,CAApB,CAOMC,WAAa,aAAqB,CAGpC,MAAOC,QAAOC,MAAP,IAEHC,EAAKC,CAAL,EACMD,EAAKC,CAAL,CADN,CAEM,CACEC,KAAMF,EAAKG,KAAL,CAAWF,CAAX,CADR,CAJH,CAOH,CACIG,MAAOJ,EAAKI,KADhB,CAPG,CAUHJ,EAAKK,IAVF,CAWHL,EAAKM,IAAL,CACM,CACEC,KAAMP,EAAKM,IADb,CADN,CAIM,IAfH,CAiBV,CA3BD,CA6BME,gBAAkB,aAAmB,CACvC,GAAM,GAAaR,EAAKS,UAAL,CAAgBC,CAAhB,CAAnB,CACA,gCACWlB,YAAYC,GADvB,YAEG,kBAAEkB,SAAF,sBAAwBb,OAAOC,MAAP,IAEvB,CACIa,IAAK,KADT,CAEIR,MAAOZ,YAAYE,MAFvB,CAGImB,QAAS,CACL,kBAAEF,SAAF,gBAAkBd,WAAW,QAAX,CAAqBC,OAAOC,MAAP,IAEnC,CACIK,MAAOZ,YAAYG,QADvB,CAFmC,CAKnCK,CALmC,CAArB,CAAlB,CADK,CAQL,kBAAEW,SAAF,gBAAkBd,WAAW,SAAX,CAAsBC,OAAOC,MAAP,IAEpC,CACIK,MAAOZ,YAAYI,SADvB,CAFoC,CAKpCI,CALoC,CAAtB,CAAlB,CARK,CAHb,CAmBIc,OAAQ,CACJC,SADI,CAnBZ,CAsBIC,SAAUhB,EAAKgB,QAtBnB,CAuBIC,SAAU,CAACR,CAvBf,CAFuB,CA2BvBT,EAAKkB,UA3BkB,CAAxB,CAFH,EA+BH,CA9DD,C,gBAgEeV,e","file":"icon-selection.js","sourcesContent":["// Helper function for checkbox and radio button\nimport 'polythene/common/object.assign';\nimport m from 'mithril';\nimport icon from 'polythene/icon/icon';\nimport iconButton from 'polythene/icon-button/icon-button';\n\nconst CSS_CLASSES = {\n    box: 'pe-control__box',\n    button: 'pe-control__button',\n    buttonOn: 'pe-control__button--on',\n    buttonOff: 'pe-control__button--off'\n};\n\nconst createIcon = (onOffType, opts) => {\n    // if opts.iconOn/Off is passed, use that icon options object and ignore size\n    // otherwise create a new object\n    return Object.assign(\n        {},\n        opts[onOffType]\n            ? opts[onOffType]\n            : {\n                msvg: opts.theme[onOffType]\n            },\n        {\n            class: opts.class\n        },\n        opts.icon,\n        opts.size\n            ? {\n                type: opts.size\n            }\n            : null\n    );\n};\n\nconst createSelection = (checked, opts) => {\n    const selectable = opts.selectable(checked);\n    return m('div', {\n        class: CSS_CLASSES.box\n    }, m.component(iconButton, Object.assign(\n        {},\n        {\n            tag: 'div',\n            class: CSS_CLASSES.button,\n            content: [\n                m.component(icon, createIcon('iconOn', Object.assign(\n                    {},\n                    {\n                        class: CSS_CLASSES.buttonOn\n                    },\n                    opts\n                ))),\n                m.component(icon, createIcon('iconOff', Object.assign(\n                    {},\n                    {\n                        class: CSS_CLASSES.buttonOff\n                    },\n                    opts\n                )))\n            ],\n            ripple: {\n                center: true\n            },\n            disabled: opts.disabled,\n            inactive: !selectable\n        },\n        opts.iconButton\n    )));\n};\n\nexport default createSelection;\n"]}
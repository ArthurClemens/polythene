{"version":3,"sources":["search.es6"],"names":["require","_mithril","_textfield","CSS_CLASSES","block","content","searchInset","searchFullwidth","mapButtonState","state","arguments","length","undefined","focus","dirty","typeClasses","inset","fullwidth","classForType","mode","createView","ctrl","opts","tag","props","Object","assign","class","type","join","id","config","events","buttons","textfieldOpts","textfield","_mithril2","default","before","component","_textfield2","getState","after","controller","prop","view"],"mappings":"sJAAAA,QAAA,iCACA,IAAAC,UAAAD,QAAA,sDACAE,WAAAF,QAAA,+EACAA,SAAA,+BAEA,IAAMG,cACFC,MAAO,YACPC,QAAS,qBACTC,YAAa,mBACbC,gBAAiB,wBAGfC,eAAiB,WAAgB,GAAfC,OAAeC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KACnC,OAAID,OAAMI,OAASJ,MAAMK,MACd,cACAL,MAAMI,MACN,QACAJ,MAAMK,MACN,QAEJ,QAGLC,aACFC,MAAOb,YAAYG,YACnBW,UAAWd,YAAYI,iBAGrBW,aAAe,WAAoB,GAAnBC,MAAmBT,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAZ,OACzB,OAAOK,aAAYI,OAGjBC,WAAa,SAACC,MAAoB,GAAdC,MAAcZ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,MAC9Ba,IAAMD,KAAKC,KAAO,MAClBC,MAAQC,OAAOC,WAEbC,OACIxB,YAAYC,MACZc,aAAaI,KAAKM,MAClBN,KAAKK,OACPE,KAAK,KACPC,GAAIR,KAAKQ,IAAM,GACfC,OAAQT,KAAKS,QAEjBT,KAAKU,OAASV,KAAKU,OAAS,MAE1BvB,MAAQD,eAAea,KAAKZ,SAC5BwB,SAAWX,KAAKW,aAAexB,WAC/ByB,cAAgBZ,KAAKa,cACrB9B,SAAU,EAAA+B,UAAAC,SAAE,OACdV,MAAOxB,YAAYE,UAEnB4B,QAAQK,OAASL,QAAQK,OAAS,KAClCF,UAAAC,QAAEE,UAAFC,YAAAH,QAAuBZ,OAAOC,UAAWQ,eACrCO,SAAU,SAAChC,OACPY,KAAKZ,MAAMA,OACPyB,cAAcO,UACdP,cAAcO,SAAShC,WAInCwB,QAAQS,MAAQT,QAAQS,MAAQ,MAEpC,QAAO,EAAAN,UAAAC,SAAEd,IAAKC,OAAQF,KAAKgB,OAAQjC,QAASiB,KAAKoB,SAG/CH,WACFI,WAAY,WACR,GAAMlC,OAAQ2B,UAAAC,QAAEO,MAChB,QACInC,MAAAA,QAGRoC,KAAM,SAACxB,MAAoB,GAAdC,MAAcZ,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,KACvB,OAAOU,YAAWC,KAAMC,wBAIjBiB","file":"search.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport textfield from 'polythene/textfield/textfield';\nimport 'polythene/search/theme/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-search',\n    content: 'pe-search__content',\n    searchInset: 'pe-search--inset',\n    searchFullwidth: 'pe-search--fullwidth'\n};\n\nconst mapButtonState = (state = {}) => {\n    if (state.focus && state.dirty) {\n        return 'focus_dirty';\n    } else if (state.focus) {\n        return 'focus';\n    } else if (state.dirty) {\n        return 'dirty';\n    }\n    return 'none';\n};\n\nconst typeClasses = {\n    inset: CSS_CLASSES.searchInset,\n    fullwidth: CSS_CLASSES.searchFullwidth\n};\n\nconst classForType = (mode = 'inset') => {\n    return typeClasses[mode];\n};\n\nconst createView = (ctrl, opts = {}) => {\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [\n                CSS_CLASSES.block,\n                classForType(opts.type),\n                opts.class\n            ].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    const state = mapButtonState(ctrl.state());\n    const buttons = (opts.buttons || {})[state] || {};\n    const textfieldOpts = opts.textfield || {};\n    const content = m('div', {\n        class: CSS_CLASSES.content\n    }, [\n        buttons.before ? buttons.before : null,\n        m.component(textfield, Object.assign({}, textfieldOpts, {\n            getState: (state) => {\n                ctrl.state(state);\n                if (textfieldOpts.getState) {\n                    textfieldOpts.getState(state);\n                }\n            }\n        })),\n        buttons.after ? buttons.after : null\n    ]);\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: () => {\n        const state = m.prop();\n        return {\n            state\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}
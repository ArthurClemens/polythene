{"version":3,"sources":["search.es6"],"names":["CSS_CLASSES","block","content","searchInset","searchFullwidth","mapButtonState","state","focus","dirty","typeClasses","inset","fullwidth","classForType","mode","createView","opts","tag","Object","assign","class","type","join","id","config","events","ctrl","buttons","textfield","before","component","textfieldOpts","getState","after","props","controller","prop","view"],"mappings":"8GACA,8K,gHAIA,GAAMA,aAAc,CAChBC,MAAO,WADS,CAEhBC,QAAS,oBAFO,CAGhBC,YAAa,kBAHG,CAIhBC,gBAAiB,sBAJD,CAApB,CAOMC,eAAiB,UAAgB,iEACnC,GAAIC,EAAMC,KAAN,EAAeD,EAAME,KAAzB,CACI,MAAO,aAAP,CAF+B,MAGxBF,GAAMC,KAHkB,CAIxB,OAJwB,CAKxBD,EAAME,KALkB,CAMxB,OANwB,CAQ5B,MACV,CAhBD,CAkBMC,YAAc,CAChBC,MAAOV,YAAYG,WADH,CAEhBQ,UAAWX,YAAYI,eAFP,CAlBpB,CAuBMQ,aAAe,UAAoB,8DAAZ,OAAY,CACrC,MAAOH,aAAYI,CAAZ,CACV,CAzBD,CA2BMC,WAAa,WAAqB,iEAC9B,EAAMC,EAAKC,GAAL,EAAY,KADY,CAE9B,EAAQC,OAAOC,MAAP,IACV,CACIC,MAAO,CACHnB,YAAYC,KADT,CAEHW,aAAaG,EAAKK,IAAlB,CAFG,CAGHL,EAAKI,KAHF,EAILE,IAJK,CAIA,GAJA,CADX,CAMIC,GAAIP,EAAKO,EAAL,EAAW,EANnB,CAOIC,OAAQR,EAAKQ,MAPjB,CADU,CAUVR,EAAKS,MAAL,CAAcT,EAAKS,MAAnB,CAA4B,IAVlB,CAFsB,CAc9B,EAAQnB,eAAeoB,EAAKnB,KAAL,EAAf,CAdsB,CAe9B,EAAU,CAACS,EAAKW,OAAL,IAAD,EAAqBpB,CAArB,KAfoB,CAgB9B,EAAgBS,EAAKY,SAAL,IAhBc,CAiB9B,4BACK3B,YAAYE,OADjB,YAGFwB,EAAQE,MAAR,CAAiBF,EAAQE,MAAzB,CAAkC,IAHhC,CAIF,kBAAEC,SAAF,qBAAuBZ,OAAOC,MAAP,IAAkBY,CAAlB,CAAiC,CACpDC,SAAU,oBAAW,CACjBN,EAAKnB,KAAL,CAAWA,CAAX,CADiB,CAEbwB,EAAcC,QAFD,EAGbD,EAAcC,QAAd,CAAuBzB,CAAvB,CAEP,CANmD,CAAjC,CAAvB,CAJE,CAYFoB,EAAQM,KAAR,CAAgBN,EAAQM,KAAxB,CAAgC,IAZ9B,EAjB8B,CA+BpC,MAAO,sBAAEhB,CAAF,CAAOiB,CAAP,CAAc,CAAClB,EAAKa,MAAN,CAAc1B,CAAd,CAAuBa,EAAKiB,KAA5B,CAAd,CACV,CA3DD,CA6DMH,UAAY,CACdK,WAAY,qBAAM,CACd,GAAM,GAAQ,kBAAEC,IAAF,EAAd,CACA,MAAO,CACH7B,OADG,CAGV,CANa,CAOd8B,KAAM,gBAAqB,iEACvB,MAAOtB,YAAWW,CAAX,CAAiBV,CAAjB,CACV,CATa,CA7DlB,C,gBAyEec,S","file":"search.js","sourcesContent":["import 'polythene/common/object.assign';\nimport m from 'mithril';\nimport textfield from 'polythene/textfield/textfield';\nimport 'polythene/search/theme/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-search',\n    content: 'pe-search__content',\n    searchInset: 'pe-search--inset',\n    searchFullwidth: 'pe-search--fullwidth'\n};\n\nconst mapButtonState = (state = {}) => {\n    if (state.focus && state.dirty) {\n        return 'focus_dirty';\n    } else if (state.focus) {\n        return 'focus';\n    } else if (state.dirty) {\n        return 'dirty';\n    }\n    return 'none';\n};\n\nconst typeClasses = {\n    inset: CSS_CLASSES.searchInset,\n    fullwidth: CSS_CLASSES.searchFullwidth\n};\n\nconst classForType = (mode = 'inset') => {\n    return typeClasses[mode];\n};\n\nconst createView = (ctrl, opts = {}) => {\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [\n                CSS_CLASSES.block,\n                classForType(opts.type),\n                opts.class\n            ].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    const state = mapButtonState(ctrl.state());\n    const buttons = (opts.buttons || {})[state] || {};\n    const textfieldOpts = opts.textfield || {};\n    const content = m('div', {\n        class: CSS_CLASSES.content\n    }, [\n        buttons.before ? buttons.before : null,\n        m.component(textfield, Object.assign({}, textfieldOpts, {\n            getState: (state) => {\n                ctrl.state(state);\n                if (textfieldOpts.getState) {\n                    textfieldOpts.getState(state);\n                }\n            }\n        })),\n        buttons.after ? buttons.after : null\n    ]);\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: () => {\n        const state = m.prop();\n        return {\n            state\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}